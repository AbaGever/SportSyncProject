@page "/P"
@using Models2
@using DBL2
@using System.Text.Json
@using System.Text;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Net;
@using Microsoft.Maui.Storage


@inject NavigationManager navigateMgr
@if (trainer != null)
{
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    </head>
    <style>

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .wrapper {
            text-align: center;
            font-size: 30px;
            max-width: 800px;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    </style>

    <body>
        <div class="wrapper">
            <h1>Profile</h1>
            <h2>
                @trainer.firstName @trainer.lastName
                <br />
                Group : @trainer.groupname
                <br />
                Email : @trainer.emailaddress
                <br />
                Password :@trainer.password
                <br />
                DateJoined : @trainer.datejoined

            </h2>
            <div class="form-group mt-2">
                <label>Password</label>
                <input type="password" class="form-control" @bind-value="NewP" />
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" @onclick="ChangeP">Change Password</button>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" @onclick="Logout">Logout</button>
            </div>
        </div>
    </body>
}



@code {
    // אזור קוד ב-Blazor Component לניהול שינוי סיסמה והתנתקות

    public Trainer trainer { get; set; }
    // מאפיין ציבורי שמייצג את המשתמש המחובר (מאמן)

    string NewP;
    // משתנה לאחסון הסיסמה החדשה שהוזנה על ידי המשתמש

    private async Task ChangeP()
    // פעולה אסינכרונית לשינוי סיסמה של המשתמש

    {
        trainer.password = NewP;
        // עדכון שדה הסיסמה של האובייקט לערך החדש

        HttpClient httpClient = new HttpClient();
        // יצירת מופע חדש של HttpClient לשליחת בקשת HTTP

        var response = await httpClient.PutAsJsonAsync<Trainer>(dataConstLink.Api.ChangeURL, trainer);
        // שליחת בקשת PUT עם אובייקט המאמן לצורך עדכון הסיסמה

        if (response.IsSuccessStatusCode)
        // בדיקה אם הבקשה הצליחה (סטטוס 200)

        {
            await Application.Current.MainPage.DisplayAlert("Info", "Password Changed", "Ok");
            // הצגת הודעה למשתמש שהסיסמה שונתה בהצלחה
        }
    }

    private async Task Logout()
    // פעולה אסינכרונית שמבצעת התנתקות של המשתמש

    {
        SecureStorage.RemoveAll();
        // מחיקת כל המידע מהאחסון המאובטח של המשתמש

        navigateMgr.NavigateTo("/", replace: true);
        // הפניה לעמוד הבית לאחר ההתנתקות
    }

    protected override async Task OnInitializedAsync()
    // פעולה אסינכרונית שמופעלת כאשר הרכיב נטען לראשונה

    {
        string jsonString = await SecureStorage.Default.GetAsync("trn");
        // ניסיון לשלוף את המידע של המשתמש מהאחסון המאובטח

        if (jsonString == null)
        // אם לא קיים מידע באחסון המאובטח

        {
            trainer = new Trainer();
            // יצירת אובייקט מאמן חדש ריק
        }
        else
        {
            trainer = JsonSerializer.Deserialize<Trainer>(jsonString);
            // המרת המידע המאוחסן לאובייקט מסוג Trainer
        }

        if (trainer.id <= 0 || trainer == null)
        // בדיקה אם המשתמש אינו תקין או לא קיים – מפנה לדף התחברות

        {
            navigateMgr.NavigateTo("/Lg", replace: true);
            // הפניה לדף התחברות במקרה של משתמש לא חוקי
        }
    }
}

