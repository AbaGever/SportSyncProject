@page "/Lg"
@using Microsoft.Maui.Storage
@using Models2
@using DBL2
@using System.Text.Json
@using System.Text;
@inject NavigationManager navigateMg

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<style>

    body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .wrapper {
    text-align: center;
    font-size: 30px;
    max-width: 800px;
    margin: auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

</style>

<body>
    <div class="wrapper">
        <h1>SportSync Log-In</h1>

        <div class="card-body">
            <div class="form-group mt-2">
                <label>Email</label>
                <input type="text" class="form-control" @bind-value="UserEmail" />
            </div>
            <div class="form-group mt-2">
                <label>Password</label>
                <input type="password" class="form-control" @bind-value="UserPassword" />
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary" @onclick="HandleLogin">Login</button>
        </div>
    </div>
</body>


@code {
    // אזור קוד ב-Blazor Component לצורך התחברות משתמש

    private string UserEmail = "";
    // משתנה לאחסון כתובת האימייל שהוזנה על ידי המשתמש

    private string UserPassword = "";
    // משתנה לאחסון הסיסמה שהוזנה על ידי המשתמש

    string ResultStr = "";
    // משתנה לאחסון תוצאה או הודעת מצב (לא בשימוש בקוד הזה בפועל)

    private async Task HandleLogin()
    // פעולה אסינכרונית שמבצעת התחברות למערכת

    {
        TrainerNew tt = new TrainerNew();
        // יצירת מופע חדש של אובייקט TrainerNew עבור בקשת התחברות

        tt.email = UserEmail;
        // מקצה את כתובת האימייל של המשתמש לשדה האימייל של האובייקט

        tt.pass = UserPassword;
        // מקצה את הסיסמה של המשתמש לשדה הסיסמה של האובייקט

        HttpClient httpClient = new HttpClient();
        // יצירת מופע חדש של HttpClient לשליחת בקשות HTTP

        Trainer trainer = new Trainer();
        // יצירת מופע ריק של אובייקט Trainer לצורך אחסון תגובת התחברות

        var xx = await httpClient.PostAsJsonAsync<TrainerNew>(dataConstLink.Api.loginurl, tt);
        // שליחת בקשת POST לשרת עם פרטי התחברות

        if (tt != null)
        // בדיקה אם האובייקט tt לא null (תמיד נכון בשלב זה – לא בדיקה לוגית נכונה)

        {
            if (tt.email.Contains("@gmail"))
            // בדיקה אם האימייל מכיל "@gmail" – תנאי מלאכותי לסינון משתמשים

            {
                trainer = await xx.Content.ReadFromJsonAsync<Trainer>();
                // קריאת תגובת השרת והמרתה לאובייקט מסוג Trainer

                string jsonOSL = JsonSerializer.Serialize(trainer);
                // המרת האובייקט למחרוזת JSON

                try
                {
                    await SecureStorage.Default.SetAsync("trn", jsonOSL);
                    // שמירת מחרוזת ה-JSON באחסון מאובטח תחת מפתח "trn"
                }
                catch (Exception storageEx)
                {
                    await Application.Current.MainPage.DisplayAlert("Storage Error", storageEx.Message, "OK");
                    // הצגת הודעת שגיאה אם פעולת השמירה נכשלה

                    return;
                }

                navigateMg.NavigateTo("/", replace: true);
                // העברה לעמוד הבית לאחר התחברות מוצלחת

                return;
            }
            else
            {
                Exception storageEx = new Exception();
                // יצירת חריגה ריקה באופן מלאכותי (לא תקין)

                await Application.Current.MainPage.DisplayAlert("Storage Error", storageEx.Message, "OK");
                // הצגת הודעת שגיאה עם הודעה ריקה אם האימייל לא עומד בתנאי

                return;
            }
        }
    }
}

