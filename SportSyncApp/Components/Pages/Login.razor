@page "/L"
@using Models2
@using DBL2
@using System.Text.Json
@using System.Text;

@inject NavigationManager navigateMg
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MAUI Blazor Styling</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<style>

    body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .wrapper {
    text-align:center;
    font-size : 30px;
    max-width: 800px;
    margin: auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

</style>

<body >
    <div class="wrapper">
        <h1 >SportSync Log-In</h1>

        <div class="card-body">
            <div class="form-group mt-2">
                <label>Email</label>
                <input type="text" class="form-control" @bind-value="UserEmail" />
            </div>
            <div class="form-group mt-2">
                <label>Password</label>
                <input type="password" class="form-control" @bind-value="UserPassword" />
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary" @onclick="HandleLogin">Login</button>
        </div>
    </div>
</body>

@code {
    private string UserEmail = "";
    private string UserPassword = "";
    private string CoachEmail = "";
    private string CoachPassword = "";
    string ResultStr = "";
    Trainer t = new Trainer();
    private async Task HandleLogin()
    {
        try
        {
           
            t.emailaddress = UserEmail;
            t.password = UserPassword;
            using HttpClient httpClient = new HttpClient();
            var jsonOSL = new StringContent(System.Text.Json.JsonSerializer.Serialize(t),Encoding.UTF8, "application/json");
            var apiResponse = await httpClient.PostAsJsonAsync("https://lnvm4w7m-7112.euw.devtunnels.ms/api/Login/Log", jsonOSL);

            if (apiResponse.IsSuccessStatusCode)
            {
                
                t = await apiResponse.Content.ReadFromJsonAsync<Trainer>();

                if (t != null && t.id > 0)
                {
                    string jsonString = JsonSerializer.Serialize(t);

                    try
                    {
                        await SecureStorage.Default.SetAsync("Trainer", jsonString);
                    }
                    catch (Exception storageEx)
                    {
                        await Application.Current.MainPage.DisplayAlert("Storage Error", storageEx.Message, "OK");
                        return;
                    }

                    navigateMg.NavigateTo("/", replace: true);
                    return;
                }
            }

            var errorMessage = await apiResponse.Content.ReadAsStringAsync();
            await Application.Current.MainPage.DisplayAlert("Login Failed", $"Server Response: {apiResponse.StatusCode} - {errorMessage}", "OK");
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", ex.Message, "OK");
        }
    }
}
