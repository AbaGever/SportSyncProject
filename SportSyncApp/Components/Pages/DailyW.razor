@page "/DW"
@using Models2
@using DBL2
@using System.Text.Json
@using System.Text;
@using System.Globalization;
@inject NavigationManager navigateMgr

<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<style>
    body {
    background-color: #3a506b;
    color: white;
    font-family: Arial, sans-serif;
    text-align: center;
    }

    .container {
    max-width: 400px;
    margin: auto;
    }

    .training-count {
    font-size: 72px;
    color: #4CAF50;
    font-weight: bold;
    margin: 20px 0;
    }

    .motivational-text {
    font-size: 18px;
    font-style: italic;
    margin-bottom: 30px;
    }

    .workout-list {
    list-style: none;
    padding: 0;
    }

    .workout-item {
    background-color: rgba(255, 255, 255, 0.1);
    padding: 15px;
    margin: 10px 0;
    border-radius: 10px;
    transition: transform 0.3s ease-in-out;
    }

    .workout-item:hover {
    transform: scale(1.05);
    background-color: rgba(255, 255, 255, 0.2);
    }
    .view-workouts {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 18px;
    border-radius: 10px;
    cursor: pointer;
    }

    .view-workouts:hover {
    background-color: #45a049;
    }
</style>

    <body>

        <div class="container">
            <h1>Number of Trainings Today:</h1>
            <div class="training-count">@wd.Count</div>
            <p class="motivational-text">Stay strong and push forward! 💪</p>



            @if (wd.Count > 0)
            {
                    <ul class="workout-list">
                    @foreach (var workout in wd)
                    {
                                <li class="workout-item">
                                    <strong>@GetFormattedHour(workout.hour)</strong> - @(workout.duration / 60) min

                            @if (workout.Isgroup == "true")
                            {
                                        <p>Group</p>

                            }
                            @if (workout.IsReccuring == "true")
                            {
                                        <p>Reccuring</p>

                            }
                                </li>

                    }
                    </ul>
            }
            else
            {
                    <p>No workouts scheduled for today.</p>
            }
        </div>
    </body>



@code {
    // אזור קוד ב-Blazor Component להצגת האימונים של המאמן בתאריך הנוכחי

    Trainer trainer { get; set; }
    // משתנה המחזיק את פרטי המאמן המחובר

    List<Workout> wd = new List<Workout>();
    // רשימה של אימונים שמאוחסנים לאחר שליפה מהשרת

    HttpClient httpClient = new HttpClient();
    // אובייקט לשליחת בקשות HTTP לשרת

    string ResultStr = "";
    // מחרוזת לאחסון שגיאות במידת הצורך

    DateTime selected = DateTime.Today;
    // תאריך נבחר, אתחול כברירת מחדל ליום הנוכחי

    protected override async Task OnInitializedAsync()
    // פעולה אסינכרונית שמתבצעת כאשר הקומפוננטה נטענת

    {
        string jsonString = await SecureStorage.Default.GetAsync("trn");
        // ניסיון לשלוף את פרטי המשתמש מהאחסון המאובטח

        if (jsonString == null)
        // אם לא נמצאו נתונים – יצירת אובייקט מאמן חדש

        {
            trainer = new Trainer();
        }
        else
        {
            trainer = JsonSerializer.Deserialize<Trainer>(jsonString);
            // המרת המידע מהאחסון לאובייקט מאמן

            try
            {
                string s = selected.ToString("yyyy-MM-dd");
                // המרת התאריך לפורמט סטנדרטי (למניעת פורמטים משתנים)

                DateTime today = DateTime.ParseExact(s, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                // יצירת אובייקט תאריך מתואם לפי פורמט קבוע

                wd = await httpClient.GetFromJsonAsync<List<Workout>>(
                    $"{dataConstLink.Api.geturl}{trainer.id},{today.Day},{today.Month},{today.Year}");
                // שליפת רשימת אימונים ליום הנוכחי מהשרת עבור המאמן
            }
            catch (Exception ex)
            {
                ResultStr = ex.Message;
                // אחסון הודעת שגיאה אם הבקשה נכשלה
            }
        }

        if (trainer.id <= 0)
        // אם מזהה המשתמש לא תקין – הפניה לעמוד התחברות

        {
            navigateMgr.NavigateTo("/Lg", replace: true);
        }
    }

    private string GetFormattedHour(int hour)
    // פונקציה שמקבלת שעה בפורמט מספרי (למשל 830) ומחזירה מחרוזת בפורמט "08:30"

    {
        int h = hour / 100;
        // חילוץ שעות מהמספר

        int m = hour % 100;
        // חילוץ דקות מהמספר

        string a = h.ToString("D2") + ":" + m.ToString("D2");
        // החזרת תוצאה עם אפסים מובילים, מופרדת בנקודתיים

        return a;
    }
}
