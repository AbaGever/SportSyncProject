@page "/Rg"
@using Microsoft.Maui.Storage
@using Models2
@using DBL2
@using System.Text.Json
@using System.Text;
@inject NavigationManager navigateMg

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<style>

    body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .wrapper {
    text-align: center;
    font-size: 30px;
    max-width: 800px;
    margin: auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

</style>

<body> 
    <div class="wrapper">
        <h1>SportSync Register</h1>

        <div class="card-body">
            <div class="form-group mt-2">
                <label>firstName</label>
                <input type="text" class="form-control" @bind-value="first" />
            </div>
            <div class="form-group mt-2">
                <label>lastName</label>
                <input type="text" class="form-control" @bind-value="last" />
            </div>
            <div class="form-group mt-2">
                <label>Email</label>
                <input type="text" class="form-control" @bind-value="email" />
            </div>
            <div class="form-group mt-2">
                <label>PhoneNumber</label>
                <input type="text" class="form-control" @bind-value="phone" />
            </div>
            <div class="form-group mt-2">
                <label>password</label>
                <input type="password" class="form-control" @bind-value="pass" />
            </div>

        </div>
        <div class="card-footer">
            <button class="btn btn-primary" @onclick="RegisterAndLogin">Register</button>
        </div>
    </div>
</body>

@code {
    // אזור קוד ב-Blazor Component לצורך התחברות ורישום משתמש

    Trainer cus = new Trainer();
    // יצירת מופע חדש של אובייקט מסוג Trainer

    string email;
    string first;
    string last;
    string pass;
    string phone;
    // הגדרת משתנים לקליטת ערכים מטופס: אימייל, שם פרטי, שם משפחה, סיסמה וטלפון

    private async Task RegisterAndLogin()
    // פעולה אסינכרונית שמבצעת רישום ואז התחברות אם האימייל תקין

    {
        cus.emailaddress = email;
        // מגדיר את כתובת האימייל של המאמן מהקלט של המשתמש

        cus.firstName = first;
        // מגדיר את השם הפרטי של המאמן מהקלט של המשתמש

        cus.lastName = last;
        // מגדיר את שם המשפחה של המאמן מהקלט של המשתמש

        cus.password = pass;
        // מגדיר את הסיסמה של המאמן מהקלט של המשתמש

        cus.phonenumber = phone;
        // מגדיר את מספר הטלפון של המאמן מהקלט של המשתמש

        cus.groupname = "ewewew";
        // מגדיר שם קבוצה סטטי כלשהו (ייתכן לשם בדיקה בלבד)

        cus.isadmin = "false";
        // מציין שהמאמן אינו אדמין

        cus.id = 0;
        // מגדיר את ה-id לאפס (בהנחה שמסד הנתונים מייצר id חדש)

        cus.datejoined = "ekrher";
        // שדה תאריך הצטרפות מוקצה בערך שרירותי ולא תקין

        HttpClient httpClient = new HttpClient();
        // יצירת מופע חדש של HttpClient לשליחת בקשות HTTP

        var xx = await httpClient.PostAsJsonAsync<Trainer>(dataConstLink.Api.regurl, cus);
        // שולח בקשת POST עם אובייקט המאמן לכתובת API לרישום
        
        if (xx.IsSuccessStatusCode)
        {
            try
            {
                if (cus.emailaddress.Contains("@gmail"))
                // בדיקה אם כתובת האימייל מכילה "@gmail" (סוג של תנאי סינון)

                {
                    TrainerNew tt = new TrainerNew();
                    // יצירת מופע חדש של אובייקט כניסה

                    tt.email = cus.emailaddress;
                    // מקצה את האימייל שנרשם לשדה האימייל של התחברות

                    tt.pass = cus.password;
                    // מקצה את הסיסמה לשדה סיסמה של התחברות

                    Trainer trainer = new Trainer();
                    // יצירת מופע ריק של מאמן לצורך קבלת תוצאה מהשרת

                    var yy = await httpClient.PostAsJsonAsync<TrainerNew>(dataConstLink.Api.loginurl, tt);
                    // שולח בקשת POST לכתובת API של התחברות עם פרטי המשתמש

                    if (tt != null)

                    {
                        trainer = await yy.Content.ReadFromJsonAsync<Trainer>();
                        // קריאת תוכן התגובה והמרתו לאובייקט Trainer

                        string jsonOSL = JsonSerializer.Serialize(trainer);
                        // ממיר את אובייקט המתאמן למחרוזת JSON

                        try
                        {
                            await SecureStorage.Default.SetAsync("trn", jsonOSL);
                            // שומר את פרטי המשתמש המאוחסנים ב-SecureStorage תחת מפתח "trn"
                        }
                        catch (Exception storageEx)
                        {
                            await Application.Current.MainPage.DisplayAlert("Storage Error", storageEx.Message, "OK");
                            // מציג הודעת שגיאה אם שמירת הנתונים נכשלה

                            return;
                        }

                        navigateMg.NavigateTo("/", replace: true);
                        // מעביר את המשתמש לעמוד הבית לאחר התחברות מוצלחת

                        return;
                    }
                }
                else
                {
                    Exception storageEx = new Exception();
                    // יצירת חריגה כללית (ללא תוכן) – לא תקין

                    await Application.Current.MainPage.DisplayAlert("Storage Error", storageEx.Message, "OK");
                    // מציג הודעת שגיאה עם טקסט חריגה ריק

                    return;
                }
            }
            catch (Exception storageEx)
            {
                await Application.Current.MainPage.DisplayAlert("Storage Error", storageEx.Message, "OK");
                // טיפול בשגיאה כללית – מציג הודעת שגיאה אם משהו משתבש במהלך התהליך כולו

                return;
            }
        }
        
    }
}

