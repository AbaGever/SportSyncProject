@page "/t"
@using Models2
@using DBL2
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<div class="main-container">
    <!-- Navbar -->
    <div class="container-fluid" style="color:black">
        <nav class="navbar navbar-expand-lg custom_nav-container ">
            <a class="navbar-brand" href="/">
                <span>
                    SportSync
                </span>
            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                    <ul class="navbar-nav  ">
                        <li class="nav-item active">
                            <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link" href="/p">Profile</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/mr">Weekly Reports</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/searchG">Search Groups</a>
                        </li>

                    </ul>
                    <div class="user_option">
                        <form class="form-inline my-2 my-lg-0 ml-0 ml-lg-4 mb-3 mb-lg-0">
                            <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit"></button>
                        </form>
                    </div>
                </div>
            </div>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="container mt-5">
        <h2 class="text-center text-white mb-4">Workout Management</h2>

        <div class="row">
            <!-- Search and Drill List -->
            <div class="col-md-7">
                <div class="search-area">
                    <div class="search-controls mb-4">
                        <select class="form-control mb-3" @onchange="OnChange">
                            <option value="default">Select Muscle Group</option>
                            @foreach (string m in Muscles)
                            {
                                <option value="@m">@m</option>
                            }
                        </select>

                        <div class="input-group">
                            <input class="form-control" @bind-value="nameofdrill" placeholder="Search Drill by Name" />
                            <div class="input-group-append">
                                <button class="button-73" @onclick="Search">Search Drills</button>
                            </div>
                        </div>
                    </div>

                    @if (list == null)
                    {
                        <p class="text-center"><em>Loading...</em></p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="thead-light">
                                    <tr>
                                        <th>Name</th>
                                        <th>Muscle</th>
                                        <th>Sets</th>
                                        <th>Reps</th>
                                        <th>Duration</th>
                                        <th>Description</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in list)
                                    {
                                        <tr>
                                            <td>@item.name</td>
                                            <td>@item.muscle</td>
                                            <td>@item.sets</td>
                                            <td>@item.reps</td>
                                            <td>@(item.duration)s</td>
                                            <td>@item.description</td>
                                            <td>
                                                <button class="button-73 btn-sm" @onclick="() => AddDrillToWorkout(item.name)">Add</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>

            <!-- Selected Drills and Schedule -->
            <div class="col-md-5">
                <div class="selected-drills-area mb-4">
                    <h4 class="text-center mb-3"> <u>Selected Drills </u></h4>
                    <div class="selected-drills-list">
                        @foreach (var drill in selectedDrills)
                        {
                            <div class="selected-drill-item">
                                <span>@drill</span>
                                <button class="button-24" @onclick="() => RemoveDrill(drill)">Remove</button>
                            </div>
                        }
                    </div>
                </div>

                <div class="schedule-area">
                    <div class="schedule-controls">
                        <input @bind="selectedDate" type="date" class="form-control mb-3" min="@DateTime.Today.ToString("yyyy-MM-dd")" max="@maxDate" />
                        <input type="time" class="form-control mb-3" @bind-value="selectedHour" required />
                        <button class="button-73 w-100" @onclick="CheckReccuring">Create Workout</button>


                        <div>
                            <h2> <u>Choose Weekly reccuring </u></h2>
                            @foreach (var option in DaysOfWeek)
                            {
                                <div>
                                    <label>
                                        <input type="checkbox" @onchange="(e) => OnOptionChanged(e, option)" />
                                        @option
                                    </label>
                                </div>
                            }
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <center style="color:white">
        <h3> @error</h3>
    </center>
</div>

<style>
    .main-container {
    min-height: 100vh;
    background: #3a506b;
    font-family: 'Poppins', sans-serif;
    }

    .search-area, .selected-drills-area, .schedule-area {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .selected-drill-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    margin: 8px 0;
    background: #f8f9fa;
    border-radius: 8px;
    transition: all 0.3s ease;
    }

    .selected-drill-item:hover {
    background: #e9ecef;
    }

    .button-73 {
    appearance: none;
    background-color: #FFFFFF;
    border-radius: 40em;
    border-style: none;
    box-shadow: #ADCFFF 0 -12px 6px inset;
    color: #000000;
    cursor: pointer;
    font-weight: 700;
    letter-spacing: -0.24px;
    padding: 0.8rem 1.2rem;
    transition: all 0.15s;
    }

    .button-73:hover {
    background-color: #FFC229;
    box-shadow: #FF6314 0 -6px 8px inset;
    transform: scale(1.05);
    }

    .button-24 {
    background: #FF4742;
    border: 1px solid #FF4742;
    border-radius: 6px;
    color: #FFFFFF;
    padding: 8px 16px;
    font-size: 14px;
    transition: all 0.3s ease;
    }

    .button-24:hover {
    background-color: #FFFFFF;
    color: #FF4742;
    }

    .table {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    }

    .table th {
    background: #f8f9fa;
    border-top: none;
    }

    .form-control {
    border-radius: 8px;
    border: 1px solid #ced4da;
    }


    .nav-link {
    color: black;
    font-weight: 500;
    padding: 8px 16px !important;
    transition: all 0.3s ease;
    }

    .nav-link:hover {
    color: #FFC229 !important;
    }

</style>





@code {

    // הגדרת משתנה מסוג מחרוזת לאחסון הודעות שגיאה
    string error = "";

    // שמירת התאריך והשעה הנוכחיים במחרוזת בפורמט שנה-חודש-יום
    string Now = DateTime.Now.ToString("yyyy-mm-dd");

    // הגדרת משתנה מסוג DateTime לאחסון שעה נבחרת, כאן התחלת היום בשעה 00:00
    private DateTime selectedHour = new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day, 0, 0, 0);

    // מחרוזת לאחסון שעה נבחרת (כנראה בפורמט טקסטואלי)
    string selectedhour = "";

    // רשימה של עצמים מסוג Drill
    List<Drill> list;

    // מחרוזת לאחסון שם התרגיל הנבחר
    string nameofdrill = "";

    // מחרוזת לאחסון השריר הנבחר
    string selectedmuscle = "";

    // רשימת מחרוזות המכילה את שמות ימי השבוע באנגלית
    List<string> DaysOfWeek = new List<string>
{
    "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"
};

    // משתנה מסוג DateTime לאחסון התאריך הנבחר, ברירת מחדל היום הנוכחי
    private DateTime selectedDate = DateTime.Today;

    // מחרוזת לאחסון תאריך מקסימלי בפורמט טקסטואלי
    private string maxDate;

    // מחרוזת לאחסון ערך האם האימון חוזר ("false" כברירת מחדל)
    string IsReccuring1 = "false";

    // רשימת מחרוזות המכילה את שמות קבוצות השרירים
    List<string> Muscles = new List<string>
{
    "Aerobic","Arms","Back","Chest","Core","Full Body","Legs","Shoulders"
};

    // משתנה מסוג Trainer לאחסון פרטי המשתמש הנכנס (מאמן)
    Trainer UserS = null;

    // רשימת מחרוזות לאחסון התרגילים שנבחרו לאימון
    List<string> selectedDrills = new List<string>();

    // רשימת מחרוזות לאחסון אפשרויות שנבחרו (למשל ימי אימון חוזר)
    private List<string> SelectedOptions = new List<string>();

    // פונקציה המטפלת בשינוי ב-checkbox, מעדכנת את רשימת האפשרויות שנבחרו
    private void OnOptionChanged(ChangeEventArgs e, string option)
    {
        // המרה של הערך שנבחר לbool
        bool isChecked = (bool)e.Value;

        // אם נבחר (מסומן), מוסיף לאפשרויות הנבחרות
        if (isChecked)
        {
            SelectedOptions.Add(option);
        }
        // אם לא נבחר (מסומן), מסיר מהרשימה
        else
        {
            SelectedOptions.Remove(option);
        }
    }

    // פונקציה סטטית שמחזירה את התאריך של היום הבא מסוג יום בשבוע מסוים
    static DateTime GetNextDay(DateTime startDate, DayOfWeek targetDay)
    {
        // חישוב כמה ימים להוסיף כדי להגיע ליום הרצוי בשבוע הבא
        int daysToAdd = ((int)targetDay - (int)startDate.DayOfWeek + 7) % 7;

        // אם היום הרצוי הוא היום עצמו, מחזיר את היום בשבוע הבא (7 ימים קדימה)
        daysToAdd = daysToAdd == 0 ? 7 : daysToAdd;

        // מחזיר את התאריך לאחר הוספת הימים המחושבים
        return startDate.AddDays(daysToAdd);
    }

    // טיפול בשינוי הערך של בחירת השריר, מעדכן את המשתנה המתאים
    private void OnChange(ChangeEventArgs args)
    {
        selectedmuscle = args.Value.ToString();
    }

    // פונקציה להוספת תרגיל לרשימת התרגילים שנבחרו אם הוא לא קיים כבר
    void AddDrillToWorkout(string drillName)
    {
        if (!selectedDrills.Contains(drillName))
        {
            selectedDrills.Add(drillName);
        }
    }

    // פונקציה להסרת תרגיל מהרשימה של התרגילים שנבחרו
    void RemoveDrill(string drillName)
    {
        selectedDrills.Remove(drillName);
    }

    // פונקציה שמופעלת לאחר הרינדור הראשוני של הרכיב
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // אם זה הרינדור הראשון
        if (firstRender)
        {
            // טוען את פרטי המאמן מה-session
            var user1 = await MySession.GetAsync<Trainer>("Trainer");

            // אם הטעינה הצליחה, שומר את פרטי המאמן ומבצע רינדור מחדש
            if (user1.Success)
            {
                UserS = user1.Value;
                StateHasChanged();
            }
            // אם לא הצליח, ואם המשתמש אינו מוגדר, מפנה לדף הבית
            else
            {
                if (UserS == null)
                {
                    navigationManager.NavigateTo("/");
                }
            }
        }
    }

    // פונקציה אסינכרונית לחיפוש תרגילים לפי שם או שריר, מעדכנת את רשימת התרגילים
    async Task Search()
    {
        DrillDB drillDB = new DrillDB();

        // שולפת את רשימת התרגילים בהתבסס על השם והשריר הנבחר
        list = await drillDB.SelectByMuscleOrNameAsync(nameofdrill, selectedmuscle);
    }

    // פונקציה לבדיקה והוספה של אימונים חוזרים בהתאם לימים שנבחרו
    async Task CheckReccuring()
    {
        // אם יש אפשרויות נבחרות ברשימה
        if (SelectedOptions.Count > 0 || SelectedOptions != null)
        {
            // מסמן שהאימון חוזר
            IsReccuring1 = "true";

            // עבור כל יום שנבחר ברשימה
            foreach (var d in SelectedOptions)
            {
                // ממיר את השם ל-DayOfWeek
                DayOfWeek dayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), d, true);

                // מחשב את התאריך הבא של אותו יום בשבוע
                DateTime rd = GetNextDay(DateTime.Today, dayOfWeek);

                // יוצר אימון בתאריך המחושב עם האימון החוזר
                await CreateWorkout(rd, IsReccuring1);
            }
        }

        // יוצר אימון בתאריך הנבחר ללא חזרה
        await CreateWorkout(selectedDate, "false");

        // מנקה את רשימת התרגילים שנבחרו
        selectedDrills.Clear();

        // מנקה את רשימת התרגילים הכללית
        list.Clear();

        // מנקה את הרשימה של האפשרויות שנבחרו
        SelectedOptions.Clear();
    }

    // פונקציה ליצירת אימון חדש בתאריך ושעה נתונים עם סטטוס חזרה
    async Task CreateWorkout(DateTime date, string isReccuring2)
    {
        // יצירת מופעים של מחלקות לביצוע פעולות DB
        WorkoutDB workoutDB = new WorkoutDB();
        DrillsListDB drillsListDB = new DrillsListDB();
        DrillDB drillDB = new DrillDB();

        // משתנה לאגירת משך כל התרגילים
        int totalDuration = 0;

        // מחשב את סך כל משך האימונים לפי התרגילים שנבחרו
        foreach (var selectedDrillName in selectedDrills)
        {
            Drill drill = await drillDB.SelectByPkAsync(selectedDrillName);
            totalDuration += drill.duration;
        }

        // המרת השעה הנבחרת למספר שלם (לדוגמה: 13:30 יהפוך ל-1330)
        int hourAsInt = ConvertDateTimeToInt(selectedHour);

        // אם ההמרה נכשלה, מדפיס הודעת שגיאה ומפסיק את יצירת האימון
        if (hourAsInt == -1)
        {
            Console.WriteLine("Invalid DateTime input. Workout creation aborted.");
            return;
        }

        // יצירת אובייקט אימון חדש עם פרטים מתאימים
        Workout newWorkout = new Workout
            {
                trainerid = UserS.id,                  // מזהה המאמן היוצר את האימון
                date = date.ToString("yyyy-MM-dd"),   // תאריך האימון בפורמט מחרוזת
                duration = totalDuration,              // משך האימון הכולל
                Isgroup = "false",                     // סימון האם האימון בקבוצה (כאן: לא)
                hour = hourAsInt,                      // שעה כמספר שלם
                IsReccuring = isReccuring2             // האם האימון חוזר
            };

        // בדיקה אם כבר קיים אימון באותו תאריך ושעה עבור המאמן
        if (await workoutDB.IsWorkoutEmpty(UserS.id, date.ToString("yyyy-MM-dd"), hourAsInt))
        {
            // הוספת האימון למסד הנתונים וקבלת האימון עם המזהה שלו
            Workout createdWorkout = await workoutDB.InsertGetWorkout(newWorkout);

            // אם האימון נוצר בהצלחה
            if (createdWorkout != null)
            {
                int workoutId = createdWorkout.id;

                // מקשר כל תרגיל שנבחר לאימון החדש במסד הנתונים
                foreach (var drillName in selectedDrills)
                {
                    drillslist dl = new drillslist(workoutId, drillName);
                    await drillsListDB.InsertDLAsync(dl);
                }

                // מעדכן את הודעת השגיאה ל"האימון הוכנס"
                error = "Inserted Workout";

                // מחכה שנייה לפני המשך (ייתכן להצגת הודעה למשתמש)
                await Task.Delay(1000);
            }
        }
        else
        {
            // אם כבר קיים אימון באותו מועד, מציג הודעת אישור למשתמש
            bool confirm = await js.InvokeAsync<bool>("confirm", $"You Already have a workout or a team practice on {selectedHour}, are you sure you want to add another workout?");

            // אם המשתמש אישר להוסיף אימון נוסף באותו מועד
            if (confirm)
            {
                Workout createdWorkout = await workoutDB.InsertGetWorkout(newWorkout);

                if (createdWorkout != null)
                {
                    int workoutId = createdWorkout.id;

                    foreach (var drillName in selectedDrills)
                    {
                        drillslist dl = new drillslist(workoutId, drillName);
                        await drillsListDB.InsertDLAsync(dl);
                    }

                    error = "Inserted Workout";
                    await Task.Delay(1000);
                }
            }
            else
            {
                // אם המשתמש ביטל את ההוספה, מציג הודעת שגיאה מתאימה
                error = "Unable to Insert Workout,date and hour already taken";
            }
        }
    }

    // פונקציה להמרת אובייקט DateTime למספר שלם המשקף שעה ודקה (לדוגמה 13:30 ל-1330)
    private int ConvertDateTimeToInt(DateTime dateTime)
    {
        int combined = dateTime.Hour * 100 + dateTime.Minute;
        return combined;
    }

    // פונקציה המופעלת בזמן האתחול של הרכיב
    protected override void OnInitialized()
    {
        // שמירת התאריך של היום
        var today = DateTime.Today;

        // חישוב התאריך של אותו יום בחודש הבא
        var nextMonth = today.AddMonths(1);

        // המרת התאריך לחודש הבא למחרוזת בפורמט שנה-חודש-יום לאיפוס ערך מקסימלי של תאריך
        maxDate = nextMonth.ToString("yyyy-MM-dd");
    }
}

