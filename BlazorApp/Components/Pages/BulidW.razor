@page "/t"
@using Models2
@using DBL2
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<HeadContent>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>SportSync</title>
    <link rel="icon" href="/download.png">
    <link href="https://fonts.googleapis.com/css?family=Poppins:400,500,600,700&display=swap" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
    <link rel="stylesheet" type="text/css" href="homepage/css/bootstrap.css">
    <link href="homepage/css/style.css" rel="stylesheet">
    <link href="homepage/css/responsive.css" rel="stylesheet">
</HeadContent>

<div class="main-container">
    <!-- Navbar -->
    <header class="header_section" style="color:white">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg custom_nav-container ">
                <a class="navbar-brand" href="/">
                    <span>
                        SportSync
                    </span>
                </a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                        <ul class="navbar-nav  ">
                            <li class="nav-item active">
                                <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                            </li>

                            @if (UserS == null)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" href="/r">Sign Up</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="/login">Log In</a>
                                </li>
                            }

                            <li class="nav-item">
                                <a class="nav-link" href="/p">Your Profile</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/searchG">Search Groups</a>
                            </li>


                        </ul>
                        <div class="user_option">
                            <div class="form-inline my-2 my-lg-0 ml-0 ml-lg-4 mb-3 mb-lg-0">
                                <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit"></button>
                            </div>
                        </div>
                    </div>
                </div>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <div class="container mt-5">
        <h2 class="text-center text-white mb-4">Workout Management</h2>

        <div class="row">
            <!-- Search and Drill List -->
            <div class="col-md-7">
                <div class="search-area">
                    <div class="search-controls mb-4">
                        <select class="form-control mb-3" @onchange="OnChange">
                            <option value="default">Select Muscle Group</option>
                            @foreach (string m in Muscles)
                            {
                                <option value="@m">@m</option>
                            }
                        </select>

                        <div class="input-group">
                            <input class="form-control" @bind-value="nameofdrill" placeholder="Search Drill by Name" />
                            <div class="input-group-append">
                                <button class="button-73" @onclick="Search">Search Drills</button>
                            </div>
                        </div>
                    </div>

                    @if (list == null)
                    {
                        <p class="text-center"><em>Loading...</em></p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="thead-light">
                                    <tr>
                                        <th>Name</th>
                                        <th>Muscle</th>
                                        <th>Sets</th>
                                        <th>Reps</th>
                                        <th>Duration</th>
                                        <th>Description</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in list)
                                    {
                                        <tr>
                                            <td>@item.name</td>
                                            <td>@item.muscle</td>
                                            <td>@item.sets</td>
                                            <td>@item.reps</td>
                                            <td>@(item.duration)s</td>
                                            <td>@item.description</td>
                                            <td>
                                                <button class="button-73 btn-sm" @onclick="() => AddDrillToWorkout(item.name)">Add</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>

            <!-- Selected Drills and Schedule -->
            <div class="col-md-5">
                <div class="selected-drills-area mb-4">
                    <h4 class="text-center mb-3"> <u>Selected Drills </u></h4>
                    <div class="selected-drills-list">
                        @foreach (var drill in selectedDrills)
                        {
                            <div class="selected-drill-item">
                                <span>@drill</span>
                                <button class="button-24" @onclick="() => RemoveDrill(drill)">Remove</button>
                            </div>
                        }
                    </div>
                </div>

                <div class="schedule-area">
                    <div class="schedule-controls">
                        <input @bind="selectedDate" type="date" class="form-control mb-3" min="@DateTime.Today.ToString("yyyy-MM-dd")" max="@maxDate" />
                        <input type="time" class="form-control mb-3" @bind-value="selectedHour" required />
                        <button class="button-73 w-100" @onclick="CheckReccuring">Create Workout</button>


                        <div>
                            <h2> <u>Choose Weekly reccuring </u></h2>
                            @foreach (var option in DaysOfWeek)
                            {
                                <div>
                                    <label>
                                        <input type="checkbox" @onchange="(e) => OnOptionChanged(e, option)" />
                                        @option
                                    </label>
                                </div>
                            }
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <center style="color:white">
        <h3> @error</h3>
    </center>
</div>

<style>
    .main-container {
    min-height: 100vh;
    background: #FFBF00;
    font-family: 'Poppins', sans-serif;
    }

    .search-area, .selected-drills-area, .schedule-area {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .selected-drill-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    margin: 8px 0;
    background: #f8f9fa;
    border-radius: 8px;
    transition: all 0.3s ease;
    }

    .selected-drill-item:hover {
    background: #e9ecef;
    }

    .button-73 {
    appearance: none;
    background-color: #FFFFFF;
    border-radius: 40em;
    border-style: none;
    box-shadow: #ADCFFF 0 -12px 6px inset;
    color: #000000;
    cursor: pointer;
    font-weight: 700;
    letter-spacing: -0.24px;
    padding: 0.8rem 1.2rem;
    transition: all 0.15s;
    }

    .button-73:hover {
    background-color: #FFC229;
    box-shadow: #FF6314 0 -6px 8px inset;
    transform: scale(1.05);
    }

    .button-24 {
    background: #FF4742;
    border: 1px solid #FF4742;
    border-radius: 6px;
    color: #FFFFFF;
    padding: 8px 16px;
    font-size: 14px;
    transition: all 0.3s ease;
    }

    .button-24:hover {
    background-color: #FFFFFF;
    color: #FF4742;
    }

    .table {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    }

    .table th {
    background: #f8f9fa;
    border-top: none;
    }

    .form-control {
    border-radius: 8px;
    border: 1px solid #ced4da;
    }


    .nav-link {
    color: white !important;
    font-weight: 500;
    padding: 8px 16px !important;
    transition: all 0.3s ease;
    }

    .nav-link:hover {
    color: #FFC229 !important;
    }

</style>




<script src="homepage/js/jquery-3.4.1.min.js"></script>
<script src="homepage/js/bootstrap.js"></script>
@code {
    string error = "";
    string Now = DateTime.Now.ToString("yyyy-mm-dd");
    DateTime selectedHour;
    string selectedhour = "";
    List<Drill> list;
    string nameofdrill = "";
    string selectedmuscle = "";
    DateTime time = DateTime.Today;
    List<string> DaysOfWeek = new List<string>
    {
    "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"
    };
    private DateTime selectedDate = DateTime.Today;
    private string maxDate;
    string IsReccuring1 = "false";
    List<string> Muscles = new List<string>
    {
    "Aerobic","Arms","Back","Chest","Core","Full Body","Legs","Shoulders"
    };
    Trainer UserS = null;

    // State to store selected drills for the workout
    List<string> selectedDrills = new List<string>();


    // List of all available options


    // List to store selected options
    private List<string> SelectedOptions = new List<string>();

    void Dosomething()
    {

    }
    // Event handler for checkbox changes
    private void OnOptionChanged(ChangeEventArgs e, string option)
    {
        bool isChecked = (bool)e.Value;
        if (isChecked)
        {
            // Add option to the selected list if checked
            SelectedOptions.Add(option);
        }
        else
        {
            // Remove option from the selected list if unchecked
            SelectedOptions.Remove(option);
        }
    }
    static DateTime GetNextDay(DateTime startDate, DayOfWeek targetDay)
    {
        // מחשב כמה ימים להוסיף כדי להגיע ליום הרצוי
        int daysToAdd = ((int)targetDay - (int)startDate.DayOfWeek + 7) % 7;
        daysToAdd = daysToAdd == 0 ? 7 : daysToAdd; // מבטיח שהיום הרצוי הוא בשבוע הבא אם היום זהה
        return startDate.AddDays(daysToAdd);
    }




    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user1 = await MySession.GetAsync<Trainer>("Trainer");
            if (user1.Success)
            {
                UserS = user1.Value;
                StateHasChanged();
            }

            else
            {
                if (UserS == null)
                {
                    navigationManager.NavigateTo("/");
                }
            }
        }

    }
    private void OnChange(ChangeEventArgs args)
    {
        selectedmuscle = args.Value.ToString();
    }

    async Task Search()
    {
        DrillDB drillDB = new DrillDB();
        list = await drillDB.SelectByMuscleOrNameAsync(nameofdrill, selectedmuscle);
    }

    void AddDrillToWorkout(string drillName)
    {
        if (!selectedDrills.Contains(drillName))
        {
            selectedDrills.Add(drillName);
        }
    }

    void RemoveDrill(string drillName)
    {
        selectedDrills.Remove(drillName);
    }


    async Task CheckReccuring()
    {
        if (SelectedOptions.Count > 0 || SelectedOptions != null)
        {
            IsReccuring1 = "true";

            foreach (var d in SelectedOptions)
            {
                DayOfWeek dayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), d, true);

                DateTime rd = GetNextDay(DateTime.Today, dayOfWeek);
                await CreateWorkout(rd, IsReccuring1);

            }
        }

        await CreateWorkout(selectedDate, "false");
        selectedDrills.Clear();
        list.Clear();
        SelectedOptions.Clear();
    }


    async Task CreateWorkout(DateTime date, string isReccuring2)
    {
        WorkoutDB workoutDB = new WorkoutDB();
        DrillsListDB drillsListDB = new DrillsListDB();

        int totalDuration = 0;

        // Calculate total duration of the selected drills
        foreach (var selectedDrillName in selectedDrills)
        {
            foreach (var drill in list)
            {
                if (drill.name == selectedDrillName)
                {
                    totalDuration += drill.duration;
                    break;
                }
            }
        }

        // Convert the selected DateTime to an integer
        int hourAsInt = ConvertDateTimeToInt(selectedHour);
        if (hourAsInt == -1)
        {
            Console.WriteLine("Invalid DateTime input. Workout creation aborted.");
            return;
        }
        
        // Create a new workout instance
        Workout newWorkout = new Workout
            {

                trainerid = UserS.id, // Assuming this is the ID of the currently logged-in trainer
                date = date.ToString("yyyy-MM-dd"),
                duration = totalDuration,
                Isgroup = "false",
                hour = hourAsInt, // Convert the integer to string for storage
                IsReccuring = isReccuring2
            };

        // Insert the workout using InsertGetWorkout and retrieve the workout object with the new ID
        if (await workoutDB.IsWorkoutEmpty(UserS.id, date.ToString("yyyy-MM-dd"), hourAsInt))
        {
            Workout createdWorkout = await workoutDB.InsertGetWorkout(newWorkout);

            if (createdWorkout != null)
            {
                int workoutId = createdWorkout.id;

                // Associate each selected drill with the new workout
                foreach (var drillName in selectedDrills)
                {
                    drillslist dl = new drillslist(workoutId, drillName);
                    await drillsListDB.InsertDLAsync(dl);
                }

                // Clear the selection and notify the user
                error = "Inserted Workout";
                await Task.Delay(1000);
                
                await Task.Yield(); // Re-render the UI

            }
        }
        else
        {

            error = "Unable to insert Workout, Date and hour already occupied";
        }
    }















    private int ConvertDateTimeToInt(DateTime dateTime)
    {
        // Combine the hour and minute into an integer
        int combined = dateTime.Hour * 100 + dateTime.Minute;
        return combined;
    }

    protected override void OnInitialized()
    {
        // Calculate the maximum date (next month)
        var today = DateTime.Today;
        var nextMonth = today.AddMonths(1);

        // Convert to string in "yyyy-MM-dd" format
        maxDate = nextMonth.ToString("yyyy-MM-dd");
    }
}
