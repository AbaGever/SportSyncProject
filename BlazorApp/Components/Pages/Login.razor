@page "/login"

@using Models2
@using DBL2
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<HeadContent>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>SportSync</title>
    <link rel="icon" href="/download.png">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins">
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
    <link rel="stylesheet" type="text/css" href="homepage/css/bootstrap.css">
    <link href="https://fonts.googleapis.com/css?family=Poppins:400,600,700&amp;display=swap" rel="stylesheet">
    <link href="homepage/css/style.css" rel="stylesheet">
    <link href="homepage/css/responsive.css" rel="stylesheet">
</HeadContent>


<style>
    body {
        background: -webkit-linear-gradient(bottom, #E0DCC8, #FFBF00);
        justify-content: center;
        align-items: center;
        height: 100vh;
        font-family: 'Arial', sans-serif;
    }

    .auth-container {
        margin-top: 10px;
        background-color: white;
        position: relative;
        overflow: hidden;
        width: 768px;
        max-width: 90%;
        min-height: 480px;
    }

    .auth-panel {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        position: absolute;
        top: 0;
        height: 100%;
        width: 50%;
        transition: transform 0.7s ease-in-out, opacity 0.7s ease-in-out;
    }

    .signin-panel {
        transform: translateX(0);
        opacity: 1;
    }

    .signup-panel {
        transform: translateX(100%);
        opacity: 0;
    }

    .input-container {
        background-color: #eee;
        border-radius: 25px;
        border: none;
        padding: 12px 15px;
        margin: 15px 0;
        width: 100%;
        display: flex;
        align-items: center;
    }

        .input-container input {
            background: transparent;
            border: none;
            flex-grow: 1;
            outline: none;
            width: 100%;
        }

    .auth-button {
        border-radius: 20px;
        border: 1px solid #ff4b2b;
        background-color: #ff4b2b;
        color: #ffffff;
        font-size: 12px;
        font-weight: bold;
        padding: 12px 45px;
        letter-spacing: 1px;
        text-transform: uppercase;
        transition: transform 80ms ease-in;
        margin-top: 20px;
        cursor: pointer;
    }

        .auth-button:hover {
            opacity: 0.8;
        }

    .overlay-container {
        position: absolute;
        top: 0;
        left: 50%;
        width: 50%;
        height: 100%;
        overflow: hidden;
        transition: transform 0.7s ease-in-out;
        z-index: 100;
        background: linear-gradient(to right, #ff4b2b, #ff416c);
        color: white;
    }

    .overlay-panel {
        position: absolute;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        height: 100%;
        width: 100%;
        padding: 0 40px;
    }

    .auth-container.active .overlay-container {
        transform: translateX(-100%);
    }

    .auth-container.active .signin-panel {
        transform: translateX(-100%);
        opacity: 0;
    }

    .auth-container.active .signup-panel {
        transform: translateX(100%);
        opacity: 1;
    }
</style>

<body>
    <center>
        <header class="header_section">
            <div class="container-fluid">
                <nav class="navbar navbar-expand-lg custom_nav-container ">
                    <a class="navbar-brand" href="/">
                        <span>SportSync</span>
                    </a>
                    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>

                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                            <ul class="navbar-nav">
                                <li class="nav-item active">
                                    <a class="nav-link" href="/">Home </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="/r">Sign Up</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="/p">Your Profile</a>
                                </li>
                            </ul>
                            
                        </div>
                    </div>
                </nav>
            </div>
        </header>
        <div class="auth-container" id="authContainer">
            <div class="auth-panel signin-panel" id="signinPanel">
                <h1>Sign In</h1>
                <div class="input-container">
                    <input type="text" id="signinUsername" placeholder="Username" />
                </div>
                <div class="input-container">
                    <input type="password" id="signinPassword" placeholder="Password" />
                </div>
                <button class="auth-button" id="signinButton">Sign In</button>
            </div>

            <div class="auth-panel signup-panel" id="signupPanel">
                <h1>Create Account</h1>
                <div class="input-container">
                    <input type="text" id="signupUsername" placeholder="Username" />
                </div>
                <div class="input-container">
                    <input type="email" id="signupEmail" placeholder="Email" />
                </div>
                <div class="input-container">
                    <input type="password" id="signupPassword" placeholder="Password" />
                </div>
                <button class="auth-button" id="signupButton">Sign Up</button>
            </div>

            <div class="overlay-container">
                <div class="overlay-panel">
                    <div id="switchToSignup">
                        <h2>Hello, Friend!</h2>
                        <p>Enter your details and start your journey</p>
                        <button class="auth-button" id="switchSignupBtn">Switch to Sign Up</button>
                    </div>
                    <div id="switchToSignin" style="display:none;">
                        <h2>Welcome Back!</h2>
                        <p>Login with your personal information</p>
                        <button class="auth-button" id="switchSigninBtn">Switch to Sign In</button>
                    </div>
                </div>
            </div>
        </div>

        <script>
            const authContainer = document.getElementById('authContainer');
            const switchSignupBtn = document.getElementById('switchSignupBtn');
            const switchSigninBtn = document.getElementById('switchSigninBtn');
            const switchToSignup = document.getElementById('switchToSignup');
            const switchToSignin = document.getElementById('switchToSignin');
            const signinButton = document.getElementById('signinButton');
            const signupButton = document.getElementById('signupButton');

            switchSignupBtn.addEventListener('click', () => {
                authContainer.classList.add('active');
                switchToSignup.style.display = 'none';
                switchToSignin.style.display = 'block';
            });

            switchSigninBtn.addEventListener('click', () => {
                authContainer.classList.remove('active');
                switchToSignup.style.display = 'block';
                switchToSignin.style.display = 'none';
            });

            signinButton.addEventListener('click', () => {
                const username = document.getElementById('signinUsername').value;
                const password = document.getElementById('signinPassword').value;
                if (username && password) {
                    alert('Sign In Successful!');
                } else {
                    alert('Please enter username and password');
                }
            });

            signupButton.addEventListener('click', () => {
                const username = document.getElementById('signupUsername').value;
                const email = document.getElementById('signupEmail').value;
                const password = document.getElementById('signupPassword').value;
                if (username && email && password) {
                    alert('Sign Up Successful!');
                } else {
                    alert('Please enter all details');
                }
            });

            window.addEventListener('load', () => {
                authContainer.classList.remove('active');
            });
        </script>
    </center>
</body>



@code {


    private string UserEmail = "";
    private string CoachEmail = "";
    private string CoachPassword = "";
    private string UserPassword = "";

    private bool isFirstRender = true;



    public async Task LogInToTrainer()
    {
        TrainerDB UserDB = new TrainerDB();
        Trainer User = await UserDB.LoginAsync(UserEmail, UserPassword);
        GroupDB groupDB = new GroupDB();
        if (User != null)
        {

            await MySession.SetAsync("Trainer", User);

            navigationManager.NavigateTo("/");


        }
        else
        {
            await js.InvokeVoidAsync("alert", $"The email or password you entered does not match!");
            UserEmail = "";
            UserPassword = "";

        }

    }
    public async Task LogInToCoach()
    {
        CoachDB CoachDB = new CoachDB();
        GroupDB groupDB = new GroupDB();
        Coach Coach = await CoachDB.LoginAsync(CoachEmail, CoachPassword);
        if (Coach != null)
        {
            await MySession.SetAsync("Coach", Coach);


            navigationManager.NavigateTo("");

        }
        else
        {
            await js.InvokeVoidAsync("alert", $"The email or password you entered does not match!");
            UserEmail = "";
            UserPassword = "";

        }



    }

}

