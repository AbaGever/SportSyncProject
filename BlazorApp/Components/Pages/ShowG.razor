@page "/ShowG/{groupname}"
@using Models2
@using DBL2
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime js

<HeadContent>
    <!-- Basic -->



    <link rel="icon" href="/download.png">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins">

    <!-- slider stylesheet -->
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">

    <!-- bootstrap core css -->
    <link rel="stylesheet" type="text/css" href="homepage/css/bootstrap.css">

    <!-- fonts style -->
    <link href="https://fonts.googleapis.com/css?family=Poppins:400,600,700&amp;display=swap" rel="stylesheet">
    <!-- Custom styles for this template -->
    <link href="homepage/css/style.css" rel="stylesheet">
    <!-- responsive style -->
    <link href="homepage/css/responsive.css" rel="stylesheet">
</HeadContent>
@if (group != null)
{
    <div class="container-fluid">
        <nav class="navbar navbar-expand-lg custom_nav-container ">
            <a class="navbar-brand" href="/">
                <span>
                    SportSync
                </span>
            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                    <ul class="navbar-nav  ">
                        <li class="nav-item active">
                            <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                        </li>
                        @if (c == null && coach == null)
                        {
                            <li class="nav-item">
                                <a class="nav-link" href="/r">Sign Up</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/login">Log In</a>
                            </li>
                        }
                        <li class="nav-item">
                            <a class="nav-link" href="/p">Your Profile</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/searchG">Search Groups</a>
                        </li>

                    </ul>
                    <div class="user_option">
                        <form class="form-inline my-2 my-lg-0 ml-0 ml-lg-4 mb-3 mb-lg-0">
                            <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit"></button>
                        </form>
                    </div>
                </div>
            </div>
        </nav>
    </div>
    <section class=" slider_section position-relative">
        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <div class="container">
                        <div class="col-lg-10 col-md-11 mx-auto">
                            <div class="detail-box">
                                <div>
                                    <h1>@group.name</h1>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <div class="wrapper">
        <center>
            @if (coach != null && coach.id == group.coachid)
            {



                <div>


                    <h3>

                        Sport : @group.sport <br /> Max Capacity : @group.maxcapacity <br />
                    </h3>
                    <h2><u> Coach Info</u>  <br />@coach.firstName   @coach.lastName</h2>
                    <h3>
                        Email: @coach.emailaddress
                        <br />Experience: @coach.exp
                    </h3>

                </div>

                <div>
                    <h2>Edit Group</h2>

                    <h3 for="inputEmail">
                        Max Capacity
                        <input @bind-value="max" type="int" placeholder="Max capacity">
                    </h3>
                    <button class="button-73" @onclick="doEditgroup" type="submit">Update</button>

                    <br /> <br />
                </div>
                <!-- Table for Users in the Group (Visible to both Coach and Regular User) -->
                @if (usersInGroup != null && usersInGroup.Count > 0)
                {
                    <center>
                        <h2><u>Players in Group</u></h2>

                        <table class="table">

                            <thead>
                                <tr>
                                    <th>First Name</th>
                                    <th>Last Name</th>
                                    @if (coach != null) // If coach is logged in, show delete button
                                    {
                                        <th>Action</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in usersInGroup)
                                {
                                    <tr>
                                        <td>@user.firstName</td>
                                        <td>@user.lastName</td>
                                        @if (coach != null) // If coach is logged in, show delete button
                                        {
                                            <td>
                                                <button Class="button-24" @onclick="() => RemoveUserFromGroup(user.id)">Remove</button>
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>

                    </center>

                }
                <center>
                    <button @onclick="() => Delete(groupname)" class="button-24">Delete Group</button>
                </center>

                <center class="wrapper">
                    <div class="schedule-area">
                        <div class="schedule-controls">
                            <h2>Add practice</h2>
                            <input @bind="selectedDate" type="date" class="form-control mb-3" min="@Now" max="@maxDate" />
                            <input type="time" class="form-control mb-3" @bind-value="selectedHour" required />
                            <input @bind="duration" class="form-control mb-3"  placeholder="Enter Duration of Practice in Mins" />
                            <button class="button-73 w-100" @onclick="CheckReccuring">Create Workout</button>


                            <div>
                                <h2> <u>Choose Weekly reccuring </u></h2>
                                @foreach (var option in DaysOfWeek)
                                {
                                    <div>
                                        <label>
                                            <input type="checkbox" @onchange="(e) => OnOptionChanged(e, option)" />
                                            @option
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </center>
            }

            else if (coach == null && c != null && c1 !=null)
            {
                @* If user is not a coach, show only the table without the delete button *@
                <section>
                    <div>
                        <div>
                            <div>
                                <h2>
                                    Coach : @c1.firstName @c1.lastName<br />
                                    Sport: @group.sport <br />
                                    Max Capacity: @group.maxcapacity <br />
                                </h2>
                            </div>


                            <!-- Table for Users in the Group (Visible for regular user as well) -->
                            @if (c.groupname == group.name)
                            {
                                @if (usersInGroup != null && usersInGroup.Count > 0)
                                {
                                    <center>
                                        <h2>Players in Group</h2>

                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>First Name</th>
                                                    <th>Last Name</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var user in usersInGroup)
                                                {
                                                    <tr>
                                                        <td>@user.firstName</td>
                                                        <td>@user.lastName</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </center>
                                }

                                <center>
                                    <button class="button-24" @onclick="() => RemoveUserFromGroup2(c.id)">Leave Group</button>
                                </center>

                            }
                            else if (c.groupname == "" && c.groupname == null)
                            {
                                <center>
                                    <button @onclick="() => JoinGroup(c.id)" class="button-73">Join Group</button>
                                </center>
                            }
                        </div>
                    </div>
                </section>
            }
            else if (c == null && coach == null && c1 != null || coach != null && coach.id != group.coachid && c1 != null)
            {

                @* If user is not a coach, show only the table without the delete button *@
                <section>
                    <div>
                        <div>
                            <div>
                                <h2>
                                    Coach : @c1.firstName @c1.lastName<br />
                                    Sport: @group.sport <br />
                                    Max Capacity: @group.maxcapacity <br />
                                </h2>
                            </div>


                            <!-- Table for Users in the Group (Visible for regular user as well) -->
                            @if (usersInGroup != null && usersInGroup.Count > 0)
                            {
                                <center>
                                    <h2>Players in Group</h2>

                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>First Name</th>
                                                <th>Last Name</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var user in usersInGroup)
                                            {
                                                <tr>
                                                    <td>@user.firstName</td>
                                                    <td>@user.lastName</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </center>
                            }
                        </div>
                    </div>
                </section>

            }
        </center>
    </div>
}
<style>

    @@import url('https://fonts.googleapis.com/css?family=Poppins:400,500,600,700&display=swap');

    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
    }

    html, body {
    width: 100%;
    height:auto;
        min-height: 100vh;
        place-items: center;
    background: -webkit-linear-gradient(bottom, #E0DCC8, #3a506b);
    }




    /* CSS */
    .button-24 {
    background: #FF4742;
    border: 1px solid #FF4742;
    border-radius: 6px;
    box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;
    box-sizing: border-box;
    color: #FFFFFF;
    cursor: pointer;
    display: inline-block;
    font-family: nunito,roboto,proxima-nova,"proxima nova",sans-serif;
    font-size: 16px;
    font-weight: 800;
    line-height: 16px;
    min-height: 40px;
    outline: 0;
    padding: 12px 14px;
    text-align: center;
    text-rendering: geometricprecision;
    text-transform: none;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    vertical-align: middle;
    }

    .button-24:hover,
    .button-24:active {
    background-color: initial;
    background-position: 0 0;
    color: #FF4742;
    }

    .button-24:active {
    opacity: .5;
    }

    .button-73 {
    appearance: none;
    background-color: #FFFFFF;
    border-radius: 40em;
    border-style: none;
    box-shadow: #ADCFFF 0 -12px 6px inset;
    box-sizing: border-box;
    color: #000000;
    cursor: pointer;
    display: inline-block;
    font-family: -apple-system,sans-serif;
    font-size: 1.2rem;
    font-weight: 700;
    letter-spacing: -.24px;
    margin: 0;
    outline: none;
    padding: 1rem 1.3rem;
    quotes: auto;
    text-align: center;
    text-decoration: none;
    transition: all .15s;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    }

    .button-73:hover {
    background-color: #FFC229;
    box-shadow: #FF6314 0 -6px 8px inset;
    transform: scale(1.125);
    }

    .button-73:active {
    transform: scale(1.025);
    }

    @@media (min-width: 768px) {
    .button-73 {
    font-size: 1.5rem;
    padding: .75rem 2rem;
    }
    }

    ::selection {
    background: Grey;
    color: #fff;
    }

    .wrapper {
    overflow: hidden;
    margin: auto;
    max-width: 500px;
    background: #fff;
    padding: 30px;
    border-radius: 5px;
    box-shadow: 0px 15px 20px rgba(0,0,0,0.1);
    }

    .wrapper .title-text {
    display: flex;
    width: 200%;
    }

    .wrapper .title {
    width: 50%;
    font-size: 35px;
    font-weight: 600;
    text-align: center;
    transition: all 0.6s cubic-bezier(0.68,-0.55,0.265,1.55);
    }

    .wrapper .slide-controls {
    position: relative;
    display: flex;
    height: 50px;
    width: 100%;
    overflow: hidden;
    margin: 30px 0 10px 0;
    justify-content: space-between;
    border: 1px solid lightgrey;
    border-radius: 5px;
    }

    .slide-controls .slide {
    height: 100%;
    width: 100%;
    color: #fff;
    font-size: 18px;
    font-weight: 500;
    text-align: center;
    line-height: 48px;
    cursor: pointer;
    z-index: 1;
    transition: all 0.6s ease;
    }

    .slide-controls label.Coach {
    color: #000;
    }

    .slide-controls .slider-tab {
    position: absolute;
    height: 100%;
    width: 50%;
    left: 0;
    z-index: 0;
    border-radius: 5px;
    background: -webkit-linear-gradient(left, white,Grey,Grey,white);
    transition: all 0.6s cubic-bezier(0.68,-0.55,0.265,1.55);
    }

    input[type="radio"] {
    display: none;
    }

    #Coach:checked ~ .slider-tab {
    left: 50%;
    }

    #Coach:checked ~ label.Coach {
    color: #fff;
    cursor: default;
    user-select: none;
    }

    #Coach:checked ~ label.Trainer {
    color: #000;
    }

    #Trainer:checked ~ label.Coach {
    color: #000;
    }

    #Trainer:checked ~ label.Trainer {
    cursor: default;
    user-select: none;
    }

    .wrapper .form-container {
    width: 100%;
    overflow: hidden;
    }

    .form-container .form-inner {
    display: flex;
    width: 200%;
    }

    .form-container .form-inner form {
    width: 50%;
    transition: all 0.6s cubic-bezier(0.68,-0.55,0.265,1.55);
    }

    .form-inner form .field {
    height: 50px;
    width: 100%;
    margin-top: 20px;
    }

    .form-inner form .field input {
    height: 100%;
    width: 100%;
    outline: none;
    padding-left: 15px;
    border-radius: 5px;
    border: 1px solid lightgrey;
    border-bottom-width: 2px;
    font-size: 17px;
    transition: all 0.3s ease;
    }

    .form-inner form .field input:focus {
    border-color: #3a506b;
    /* box-shadow: inset 0 0 3px #fb6aae; */
    }

    .form-inner form .field input::placeholder {
    color: #999;
    transition: all 0.3s ease;
    }

    form .field input:focus::placeholder {
    color: #b3b3b3;
    }

    .form-inner form .pass-link {
    margin-top: 5px;
    }

    .form-inner form .Coach-link {
    text-align: center;
    margin-top: 30px;
    }

    .form-inner form .pass-link a,
    .form-inner form .Coach-link a {
    color: #fa4299;
    text-decoration: none;
    }

    .form-inner form .pass-link a:hover,
    .form-inner form .Coach-link a:hover {
    text-decoration: underline;
    }

    form .btn {
    height: 50px;
    width: 100%;
    border-radius: 5px;
    position: relative;
    overflow: hidden;
    }

    form .btn .btn-layer {
    height: 100%;
    width: 300%;
    position: absolute;
    left: -100%;
    background: -webkit-linear-gradient(right,#E0DCC8,#3a506b,#E0DCC8,#3a506b);
    border-radius: 5px;
    transition: all 0.4s ease;
    ;
    }

    form .btn:hover .btn-layer {
    left: 0;
    }

    form .btn input[type="submit"] {
    height: 100%;
    width: 100%;
    z-index: 1;
    position: relative;
    background: none;
    border: none;
    color: #fff;
    padding-left: 0;
    border-radius: 5px;
    font-size: 20px;
    font-weight: 500;
    cursor: pointer;
    }
</style>



@code {
    [Parameter]
    public string groupname { get; set; }
    Coach coach = null;
    Trainer c = null;
    Group group;
    private string Name = "";
    private int max;
    List<Trainer> usersInGroup = new List<Trainer>();
    GroupDB groupDB = new GroupDB();
    CoachDB coachDB = new CoachDB();
    Coach c1 = null;
    string Now = DateTime.Now.ToString("yyyy-mm-dd");
    DateTime selectedHour = DateTime.Today;
    string selectedhour = "";
    List<Drill> list;

    private DateTime selectedDate = DateTime.Today;
    private string maxDate;
    string error = "";
    string duration = "";
    TrainerDB TrainerDB = new TrainerDB();
    string IsReccuring1 = "false";
    List<string> DaysOfWeek = new List<string>
    {
    "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"
    };
    private List<string> SelectedOptions = new List<string>();

    private void OnOptionChanged(ChangeEventArgs e, string option)
    {
        bool isChecked = (bool)e.Value;
        if (isChecked)
        {
            // Add option to the selected list if checked
            SelectedOptions.Add(option);
        }
        else
        {
            // Remove option from the selected list if unchecked
            SelectedOptions.Remove(option);
        }
    }
    async Task CheckReccuring()
    {
        if (SelectedOptions.Count > 0 || SelectedOptions != null)
        {
            IsReccuring1 = "true";

            foreach (var d in SelectedOptions)
            {
                DayOfWeek dayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), d, true);

                DateTime rd = GetNextDay(DateTime.Today, dayOfWeek);
                await CreateWorkout(rd, IsReccuring1);


            }
        }

        await CreateWorkout(selectedDate, "false");

        SelectedOptions.Clear();
        selectedDate = DateTime.Today;
        selectedHour = new DateTime();
        duration = "";
        Task.Yield();
        StateHasChanged();
    }
    static DateTime GetNextDay(DateTime startDate, DayOfWeek targetDay)
    {
        // מחשב כמה ימים להוסיף כדי להגיע ליום הרצוי
        int daysToAdd = ((int)targetDay - (int)startDate.DayOfWeek + 7) % 7;
        daysToAdd = daysToAdd == 0 ? 7 : daysToAdd; // מבטיח שהיום הרצוי הוא בשבוע הבא אם היום זהה
        return startDate.AddDays(daysToAdd);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (groupname == null)
        {
            group = null;
        }
        else
        {

            group = await groupDB.SelectByPkAsync(groupname);
            StateHasChanged();
            max = group.maxcapacity;
            c1 = await coachDB.SelectByPkAsync(group.coachid);


        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            var name1 = await MySession.GetAsync<Coach>("Coach");
            if (name1.Success)
            {
                coach = name1.Value;
                await LoadUsersInGroup();

                StateHasChanged();
            }

            var user1 = await MySession.GetAsync<Trainer>("Trainer");
            if (user1.Success)
            {
                c = user1.Value;
                await LoadUsersInGroup();
                StateHasChanged();
            }


        }
    }


    async Task doEditgroup()
    {
        GroupDB GDB = new GroupDB();

        group.maxcapacity = max;

        int n = await GDB.UpdateAsync(group);

        if (n > 0)
        {
            await js.InvokeVoidAsync("alert", $"Updated Successfully!");

        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Update failed!");
        }
    }



    public async Task LoadUsersInGroup()
    {

        TrainerDB userDB = new TrainerDB();
        List<Trainer> usersInGroup = await userDB.SelectAllInGroup(groupname);

        this.usersInGroup = usersInGroup;

        StateHasChanged();
    }

    async Task RemoveUserFromGroup(int id)
    {
        TrainerDB userDB = new TrainerDB();
        Trainer user = await userDB.SelectByPkAsync(id);

        if (user != null)
        {
            user.groupname = null;
            await userDB.UpdateAsync(user);
            await LoadUsersInGroup();
        }
    }

    async Task RemoveUserFromGroup2(int id)
    {
        TrainerDB userDB = new TrainerDB();
        Trainer user = await userDB.SelectByPkAsync(id);

        if (user != null)
        {
            user.groupname = null;
            await userDB.UpdateAsync(user);
            await MySession.SetAsync("Trainer", user);
            var name = await MySession.GetAsync<Trainer>("Trainer");
            if (name.Success)
            {
                user = name.Value;
                StateHasChanged();
            }
            await LoadUsersInGroup();
        }
        navigationManager.NavigateTo("");

    }
    async Task JoinGroup(int id)
    {
        TrainerDB userDB = new TrainerDB();
        Trainer user = await userDB.SelectByPkAsync(id);

        if (user != null)
        {
            user.groupname = groupname;
            await userDB.UpdateAsync(user);
            await MySession.SetAsync("Trainer", user);
            var name = await MySession.GetAsync<Trainer>("Trainer");
            if (name.Success)
            {
                user = name.Value;
                StateHasChanged();
            }
            await LoadUsersInGroup();
        }


    }
    async Task Delete(string gname)
    {
        TrainerDB trainerDB = new TrainerDB();
        List<Trainer> TS = await trainerDB.SelectAllInGroup(gname);

        GroupDB groupDB = new GroupDB();
        Group group = await groupDB.SelectByPkAsync(gname);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {group.name}?"))
        {
            foreach (Trainer trainer in TS)
            {
                trainer.groupname = null;
                int n = await trainerDB.UpdateAsync(trainer);
            }
            coach.groupname = null;

            int a = await coachDB.UpdateAsync(coach);
            if (a > 0)
            {
                await MySession.SetAsync("Coach", coach);
                var name = await MySession.GetAsync<Coach>("Coach");
                if (name.Success)
                {
                    coach = name.Value;
                    StateHasChanged();
                }
            }
            await groupDB.DeleteAsync(group);
            await OnInitializedAsync();
            navigationManager.NavigateTo("/");
        }
    }
    async Task CreateWorkout(DateTime date, string isReccuring2)
    {
        WorkoutDB workoutDB = new WorkoutDB();
        DrillsListDB drillsListDB = new DrillsListDB();

        int totalDuration = (int.Parse(duration)) * 60;

        // Calculate total duration of the selected drills


        // Convert the selected DateTime to an integer
        int hourAsInt = ConvertDateTimeToInt(selectedHour);
        if (hourAsInt == -1)
        {
            Console.WriteLine("Invalid DateTime input. Workout creation aborted.");
            return;
        }
        List<Trainer> LT = await TrainerDB.SelectAllInGroup(groupname);
        // Create a new workout instance
        foreach (var t in LT)
        {
            Workout newWorkout = new Workout
                {
                    trainerid = t.id,
                    date = date.ToString("yyyy-MM-dd"),
                    duration = totalDuration,
                    Isgroup = "true",
                    hour = hourAsInt, // Convert the integer to string for storage
                    IsReccuring = isReccuring2

                };

            // Insert the workout using InsertGetWorkout and retrieve the workout object with the new ID

            Workout createdWorkout = await workoutDB.InsertGetWorkout(newWorkout);

            if (createdWorkout != null)
            {
                int workoutId = createdWorkout.id;


            }
        }
    }
    private int ConvertDateTimeToInt(DateTime dateTime)
    {
        // Combine the hour and minute into an integer
        int combined = dateTime.Hour * 100 + dateTime.Minute;
        return combined;
    }

}
