@page "/ShowG/{groupname}"
@using Models2
@using DBL2
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime js

@if (group != null)
{

    @if (coach != null)
    {
        <section>
            <div class="container">
                <div class="content">

                    <div>
                        <h1>@group.name</h1>

                        <h3>
                            Sport : @group.sport <br /> Max Capacity : @group.maxcapacity <br />
                        </h3>
                        <h2><u> Coach Info</u>  <br />@coach.firstName   @coach.lastName</h2>
                        <h3>
                            Email: @coach.emailaddress
                            <br />Experience: @coach.exp
                        </h3>

                    </div>

                    <div>
                        <h2>Edit Group</h2>

                        <h3 for="inputEmail">
                            Max Capacity
                            <input @bind-value="max" type="int" placeholder="Max capacity">
                        </h3>
                        <button class="button" @onclick="doEditgroup" type="submit">Update</button>

                        <br /> <br />
                    </div>
                    <!-- Table for Users in the Group (Visible to both Coach and Regular User) -->
                    @if (usersInGroup != null && usersInGroup.Count > 0)
                    {
                        <center>
                            <h2><u>Players in Group</u></h2>

                            <table class="table">

                                <thead>
                                    <tr>
                                        <th>First Name</th>
                                        <th>Last Name</th>
                                        @if (coach != null) // If coach is logged in, show delete button
                                        {
                                            <th>Action</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in usersInGroup)
                                    {
                                        <tr>
                                            <td>@user.firstName</td>
                                            <td>@user.lastName</td>
                                            @if (coach != null) // If coach is logged in, show delete button
                                            {
                                                <td>
                                                    <button style="background-color:white;border-color:white" @onclick="() => RemoveUserFromGroup(user.id)" class="btn btn-danger">Remove</button>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        </center>

                    }
            <center>
                <button  @onclick="() => Delete(groupname)" class="remove">Delete Group</button>
            </center>
                </div>

            </div>
        </section>
    }
    else if (coach == null && c != null)
    {
        @* If user is not a coach, show only the table without the delete button *@
        <section>
            <div class="container">
                <div class="content">
                    <div>
                        <h1>@group.name</h1>
                        <h2>
                            Sport: @group.sport <br />
                            Max Capacity: @group.maxcapacity <br />
                        </h2>
                    </div>


                    <!-- Table for Users in the Group (Visible for regular user as well) -->
                    @if (c.groupname == group.name)
                    {
                        @if (usersInGroup != null && usersInGroup.Count > 0)
                        {
                            <center>
                                <h2>Players in Group</h2>

                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>First Name</th>
                                            <th>Last Name</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in usersInGroup)
                                        {
                                            <tr>
                                                <td>@user.firstName</td>
                                                <td>@user.lastName</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </center>
                        }

                        <center>
                            <button style="background-color:darkred;padding:10px 30px" @onclick="() => RemoveUserFromGroup2(c.id)" class="btn btn-lg btn-primary btn-block m-1">Leave Group</button>
                        </center>
                    }
                    else
                    {
                        <center>
                            <button style="background-color:green;padding:10px 30px" @onclick="() => JoinGroup(c.id)" class="btn btn-lg btn-primary btn-block m-1">Join Group</button>
                        </center>
                    }
                </div>
            </div>
        </section>
    }
    else if (c == null && coach == null)
    {

        @* If user is not a coach, show only the table without the delete button *@
        <section>
            <div class="container">
                <div class="content">
                    <div>
                        <h1 class="display-5 fw-bolder">@group.name</h1>
                        <h2>
                            Sport: @group.sport <br />
                            Max Capacity: @group.maxcapacity <br />
                        </h2>
                    </div>


                    <!-- Table for Users in the Group (Visible for regular user as well) -->
                    @if (usersInGroup != null && usersInGroup.Count > 0)
                    {
                        <center>
                            <h2>Players in Group</h2>

                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>First Name</th>
                                        <th>Last Name</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in usersInGroup)
                                    {
                                        <tr>
                                            <td>@user.firstName</td>
                                            <td>@user.lastName</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </center>
                    }
                </div>
            </div>
        </section>
    }
}

@code {
    [Parameter]
    public string groupname { get; set; }
    Coach coach = null;
    Trainer c = null;
    Group group;
    private string Name = "";
    private int max;
    List<Trainer> usersInGroup = new List<Trainer>();
    GroupDB groupDB = new GroupDB();
    CoachDB coachDB = new CoachDB();

    protected override async Task OnParametersSetAsync()
    {
        if (groupname == null)
        {
            group = null;
        }
        else
        {

            group = await groupDB.SelectByPkAsync(groupname);
            StateHasChanged();
            max = group.maxcapacity;



        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            var name1 = await MySession.GetAsync<Coach>("Coach");
            if (name1.Success)
            {
                coach = name1.Value;
                await LoadUsersInGroup();

                StateHasChanged();
            }

            var user1 = await MySession.GetAsync<Trainer>("Trainer");
            if (user1.Success)
            {
                c = user1.Value;
                await LoadUsersInGroup();
                StateHasChanged();
            }


        }
    }


    async Task doEditgroup()
    {
        GroupDB GDB = new GroupDB();

        group.maxcapacity = max;

        int n = await GDB.UpdateAsync(group);

        if (n > 0)
        {
            await js.InvokeVoidAsync("alert", $"Updated Successfully!");

        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Update failed!");
        }
    }



    public async Task LoadUsersInGroup()
    {

        TrainerDB userDB = new TrainerDB();
        List<Trainer> usersInGroup = await userDB.SelectAllInGroup(groupname);

        this.usersInGroup = usersInGroup;

        StateHasChanged();
    }

    async Task RemoveUserFromGroup(int id)
    {
        TrainerDB userDB = new TrainerDB();
        Trainer user = await userDB.SelectByPkAsync(id);

        if (user != null)
        {
            user.groupname = null;
            await userDB.UpdateAsync(user);
            await LoadUsersInGroup();
        }
    }

    async Task RemoveUserFromGroup2(int id)
    {
        TrainerDB userDB = new TrainerDB();
        Trainer user = await userDB.SelectByPkAsync(id);

        if (user != null)
        {
            user.groupname = null;
            await userDB.UpdateAsync(user);
            await MySession.SetAsync("Trainer", user);
            var name = await MySession.GetAsync<Trainer>("Trainer");
            if (name.Success)
            {
                user = name.Value;
                StateHasChanged();
            }
            await LoadUsersInGroup();
        }
        navigationManager.NavigateTo("");

    }
    async Task JoinGroup(int id)
    {
        TrainerDB userDB = new TrainerDB();
        Trainer user = await userDB.SelectByPkAsync(id);

        if (user != null)
        {
            user.groupname = groupname;
            await userDB.UpdateAsync(user);
            await MySession.SetAsync("Trainer", user);
            var name = await MySession.GetAsync<Trainer>("Trainer");
            if (name.Success)
            {
                user = name.Value;
                StateHasChanged();
            }
            await LoadUsersInGroup();
        }


    }
    async Task Delete(string gname)
    {
        TrainerDB trainerDB = new TrainerDB();
        List<Trainer> TS = await trainerDB.SelectAllInGroup(gname);
       
        GroupDB groupDB = new GroupDB();
        Group group = await groupDB.SelectByPkAsync(gname);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {group.name}?"))
        {
            foreach (Trainer trainer in TS)
            {
                trainer.groupname = null;
                int n = await trainerDB.UpdateAsync(trainer);
            }
            coach.groupname = null;

            int a = await coachDB.UpdateAsync(coach);
            if (a > 0)
            {
                await MySession.SetAsync("Coach", coach);
                var name = await MySession.GetAsync<Coach>("Coach");
                if (name.Success)
                {
                    coach = name.Value;
                    StateHasChanged();
                }
            }
            await groupDB.DeleteAsync(group);
            await OnInitializedAsync();
            navigationManager.NavigateTo("/");
        }
    }

}
