@page "/ShowG/{groupname}"
@using Models2
@using DBL2
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime js



@if (group != null)
{
    <div class="container-fluid">
        <nav class="navbar navbar-expand-lg custom_nav-container ">
            <a class="navbar-brand" href="/">
                <span>
                    SportSync
                </span>
            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                    <ul class="navbar-nav  ">
                        <li class="nav-item active">
                            <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                        </li>
                        @if (c == null && coach == null)
                        {
                            <li class="nav-item">
                                <a class="nav-link" href="/r">Sign Up</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/login">Log In</a>
                            </li>
                        }
                        else if (coach == null && c != null)
                        {

                            <li class="nav-item">
                                <a class="nav-link" href="/mr">Weekly Reports</a>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link" href="/p">Your Profile</a>
                            </li>
                        }
                        <li class="nav-item">
                            <a class="nav-link" href="/searchG">Search Groups</a>
                        </li>

                    </ul>
                    <div class="user_option">
                        <form class="form-inline my-2 my-lg-0 ml-0 ml-lg-4 mb-3 mb-lg-0">
                            <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit"></button>
                        </form>
                    </div>
                </div>
            </div>
        </nav>
    </div>
    <section class=" slider_section position-relative">
        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <div class="container">
                        <div class="col-lg-10 col-md-11 mx-auto">
                            <div class="detail-box">
                                <div>
                                    <h1>@group.name</h1>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <div class="wrapper">
        <center>
            @if (coach != null && coach.id == group.coachid)
            {



                <div>


                    <h3>

                        Sport : @group.sport <br /> Max Capacity : @group.maxcapacity <br />
                    </h3>
                    <h2><u> Coach Info</u>  <br />@coach.firstName   @coach.lastName</h2>
                    <h3>
                        Email: @coach.emailaddress
                        <br />Experience: @coach.exp
                    </h3>

                </div>

                <div>
                    <h2>Edit Group</h2>

                    <h3 for="inputEmail">
                        Max Capacity
                        <input @bind-value="max" type="int" placeholder="Max capacity">
                    </h3>
                    <button class="button-73" @onclick="doEditgroup" type="submit">Update</button>

                    <br /> <br />
                </div>
                <!-- Table for Users in the Group (Visible to both Coach and Regular User) -->
                @if (usersInGroup != null && usersInGroup.Count > 0)
                {
                    <center>
                        <h2><u>Players in Group</u></h2>

                        <table class="table">

                            <thead>
                                <tr>
                                    <th>First Name</th>
                                    <th>Last Name</th>
                                    @if (coach != null) // If coach is logged in, show delete button
                                    {
                                        <th>Action</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in usersInGroup)
                                {
                                    <tr>
                                        <td>@user.firstName</td>
                                        <td>@user.lastName</td>
                                        @if (coach != null) // If coach is logged in, show delete button
                                        {
                                            <td>
                                                <button Class="button-24" @onclick="() => RemoveUserFromGroup(user.id)">Remove</button>
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>

                    </center>

                }
                <center>
                    <button @onclick="() => Delete(groupname)" class="button-24">Delete Group</button>
                </center>

                <center class="wrapper">
                    <div class="schedule-area">
                        <div class="schedule-controls">
                            <h2>Add practice</h2>
                            <input @bind="selectedDate" type="date" class="form-control mb-3" min="@Now" max="@maxDate" />
                            <input type="time" class="form-control mb-3" @bind-value="selectedHour" required />
                            <input @bind="duration" class="form-control mb-3" placeholder="Enter Duration of Practice in Mins" />
                            <button class="button-73 w-100" @onclick="CheckReccuring">Create Workout</button>


                            <div>
                                <h2> <u>Choose Weekly reccuring </u></h2>
                                @foreach (var option in DaysOfWeek)
                                {
                                    <div>
                                        <label>
                                            <input type="checkbox" @onchange="(e) => OnOptionChanged(e, option)" />
                                            @option
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </center>
            }

            else if (coach == null && c != null && c1 != null)
            {
                @* If user is not a coach, show only the table without the delete button *@
                <section>
                    <div>
                        <div>
                            <div>
                                <h2>
                                    Coach : @c1.firstName @c1.lastName<br />
                                    Sport: @group.sport <br />
                                    Max Capacity: @group.maxcapacity <br />
                                </h2>
                            </div>


                            <!-- Table for Users in the Group (Visible for regular user as well) -->
                            @if (c.groupname == group.name)
                            {
                                @if (usersInGroup != null && usersInGroup.Count > 0)
                                {
                                    <center>
                                        <h2>Players in Group</h2>

                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>First Name</th>
                                                    <th>Last Name</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var user in usersInGroup)
                                                {
                                                    <tr>
                                                        <td>@user.firstName</td>
                                                        <td>@user.lastName</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </center>
                                }

                                <center>
                                    <button class="button-24" @onclick="() => RemoveUserFromGroup2(c.id)">Leave Group</button>
                                </center>

                            }
                            @if (c.groupname == "" || c.groupname == null)
                            {
                                <center>
                                    <button @onclick="() => JoinGroup(c.id)" class="button-73">Join Group</button>
                                </center>
                            }
                        </div>
                    </div>
                </section>
            }
            else if (c == null && coach == null && c1 != null || coach != null && coach.id != group.coachid && c1 != null)
            {

                @* If user is not a coach, show only the table without the delete button *@
                <section>
                    <div>
                        <div>
                            <div>
                                <h2>
                                    Coach : @c1.firstName @c1.lastName<br />
                                    Sport: @group.sport <br />
                                    Max Capacity: @group.maxcapacity <br />
                                </h2>
                            </div>

                            @if (c != null)
                            {


                                <!-- Table for Users in the Group (Visible for regular user as well) -->
                                @if (usersInGroup != null && usersInGroup.Count > 0)
                                {
                                    <center>
                                        <h2>Players in Group</h2>

                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>First Name</th>
                                                    <th>Last Name</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var user in usersInGroup)
                                                {
                                                    <tr>
                                                        <td>@user.firstName</td>
                                                        <td>@user.lastName</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </center>
                                }
                            }
                        </div>
                    </div>
                </section>

            }
        </center>
    </div>
}
<style>

    @@import url('https://fonts.googleapis.com/css?family=Poppins:400,500,600,700&display=swap');

    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
    }

    html, body {
    width: 100%;
    height: auto;
    min-height: 100vh;
    place-items: center;
    background: -webkit-linear-gradient(bottom, #E0DCC8, #3a506b);
    }




    /* CSS */
    .button-24 {
    background: #FF4742;
    border: 1px solid #FF4742;
    border-radius: 6px;
    box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;
    box-sizing: border-box;
    color: #FFFFFF;
    cursor: pointer;
    display: inline-block;
    font-family: nunito,roboto,proxima-nova,"proxima nova",sans-serif;
    font-size: 16px;
    font-weight: 800;
    line-height: 16px;
    min-height: 40px;
    outline: 0;
    padding: 12px 14px;
    text-align: center;
    text-rendering: geometricprecision;
    text-transform: none;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    vertical-align: middle;
    }

    .button-24:hover,
    .button-24:active {
    background-color: initial;
    background-position: 0 0;
    color: #FF4742;
    }

    .button-24:active {
    opacity: .5;
    }

    .button-73 {
    appearance: none;
    background-color: #FFFFFF;
    border-radius: 40em;
    border-style: none;
    box-shadow: #ADCFFF 0 -12px 6px inset;
    box-sizing: border-box;
    color: #000000;
    cursor: pointer;
    display: inline-block;
    font-family: -apple-system,sans-serif;
    font-size: 1.2rem;
    font-weight: 700;
    letter-spacing: -.24px;
    margin: 0;
    outline: none;
    padding: 1rem 1.3rem;
    quotes: auto;
    text-align: center;
    text-decoration: none;
    transition: all .15s;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    }

    .button-73:hover {
    background-color: #FFC229;
    box-shadow: #FF6314 0 -6px 8px inset;
    transform: scale(1.125);
    }

    .button-73:active {
    transform: scale(1.025);
    }

    @@media (min-width: 768px) {
    .button-73 {
    font-size: 1.5rem;
    padding: .75rem 2rem;
    }
    }

    ::selection {
    background: Grey;
    color: #fff;
    }

    .wrapper {
    overflow: hidden;
    margin: auto;
    max-width: 500px;
    background: #fff;
    padding: 30px;
    border-radius: 5px;
    box-shadow: 0px 15px 20px rgba(0,0,0,0.1);
    }

    .wrapper .title-text {
    display: flex;
    width: 200%;
    }

    .wrapper .title {
    width: 50%;
    font-size: 35px;
    font-weight: 600;
    text-align: center;
    transition: all 0.6s cubic-bezier(0.68,-0.55,0.265,1.55);
    }

    .wrapper .slide-controls {
    position: relative;
    display: flex;
    height: 50px;
    width: 100%;
    overflow: hidden;
    margin: 30px 0 10px 0;
    justify-content: space-between;
    border: 1px solid lightgrey;
    border-radius: 5px;
    }

    .slide-controls .slide {
    height: 100%;
    width: 100%;
    color: #fff;
    font-size: 18px;
    font-weight: 500;
    text-align: center;
    line-height: 48px;
    cursor: pointer;
    z-index: 1;
    transition: all 0.6s ease;
    }

    .slide-controls label.Coach {
    color: #000;
    }

    .slide-controls .slider-tab {
    position: absolute;
    height: 100%;
    width: 50%;
    left: 0;
    z-index: 0;
    border-radius: 5px;
    background: -webkit-linear-gradient(left, white,Grey,Grey,white);
    transition: all 0.6s cubic-bezier(0.68,-0.55,0.265,1.55);
    }

    input[type="radio"] {
    display: none;
    }

    #Coach:checked ~ .slider-tab {
    left: 50%;
    }

    #Coach:checked ~ label.Coach {
    color: #fff;
    cursor: default;
    user-select: none;
    }

    #Coach:checked ~ label.Trainer {
    color: #000;
    }

    #Trainer:checked ~ label.Coach {
    color: #000;
    }

    #Trainer:checked ~ label.Trainer {
    cursor: default;
    user-select: none;
    }

    .wrapper .form-container {
    width: 100%;
    overflow: hidden;
    }

    .form-container .form-inner {
    display: flex;
    width: 200%;
    }

    .form-container .form-inner form {
    width: 50%;
    transition: all 0.6s cubic-bezier(0.68,-0.55,0.265,1.55);
    }

    .form-inner form .field {
    height: 50px;
    width: 100%;
    margin-top: 20px;
    }

    .form-inner form .field input {
    height: 100%;
    width: 100%;
    outline: none;
    padding-left: 15px;
    border-radius: 5px;
    border: 1px solid lightgrey;
    border-bottom-width: 2px;
    font-size: 17px;
    transition: all 0.3s ease;
    }

    .form-inner form .field input:focus {
    border-color: #3a506b;
    /* box-shadow: inset 0 0 3px #fb6aae; */
    }

    .form-inner form .field input::placeholder {
    color: #999;
    transition: all 0.3s ease;
    }

    form .field input:focus::placeholder {
    color: #b3b3b3;
    }

    .form-inner form .pass-link {
    margin-top: 5px;
    }

    .form-inner form .Coach-link {
    text-align: center;
    margin-top: 30px;
    }

    .form-inner form .pass-link a,
    .form-inner form .Coach-link a {
    color: #fa4299;
    text-decoration: none;
    }

    .form-inner form .pass-link a:hover,
    .form-inner form .Coach-link a:hover {
    text-decoration: underline;
    }

    form .btn {
    height: 50px;
    width: 100%;
    border-radius: 5px;
    position: relative;
    overflow: hidden;
    }

    form .btn .btn-layer {
    height: 100%;
    width: 300%;
    position: absolute;
    left: -100%;
    background: -webkit-linear-gradient(right,#E0DCC8,#3a506b,#E0DCC8,#3a506b);
    border-radius: 5px;
    transition: all 0.4s ease;
    ;
    }

    form .btn:hover .btn-layer {
    left: 0;
    }

    form .btn input[type="submit"] {
    height: 100%;
    width: 100%;
    z-index: 1;
    position: relative;
    background: none;
    border: none;
    color: #fff;
    padding-left: 0;
    border-radius: 5px;
    font-size: 20px;
    font-weight: 500;
    cursor: pointer;
    }
</style>



@code {

    [Parameter]
    // מסמן שהפרופרטי groupname מתקבל כפרמטר מבחוץ (לרוב מהקומפוננטה אב)

    public string groupname { get; set; }
    // מחרוזת לאחסון שם הקבוצה שהועבר לפרמטר

    Coach coach = null;
    // משתנה מסוג Coach, מאתחל ל-null, לאחסון מאמן נוכחי

    Trainer c = null;
    // משתנה מסוג Trainer, מאתחל ל-null, לאחסון מתאמן נוכחי

    Group group;
    // משתנה מסוג Group לאחסון פרטי הקבוצה הנבחרת

    private string Name = "";
    // משתנה מחרוזת לאחסון שם, מאתחל למחרוזת ריקה

    private int max;
    // משתנה מספרי לאחסון הקיבולת המקסימלית של הקבוצה

    List<Trainer> usersInGroup = new List<Trainer>();
    // רשימת מתאמנים שמשויכים לקבוצה, מאתחל כרשימה ריקה

    GroupDB groupDB = new GroupDB();
    // מופע של מחלקת גישה לנתוני קבוצות במסד הנתונים

    CoachDB coachDB = new CoachDB();
    // מופע של מחלקת גישה לנתוני מאמנים במסד הנתונים

    Coach c1 = null;
    // משתנה מסוג Coach, מאתחל ל-null, לאחסון מאמן נוסף/עזר

    string a;
    // משתנה מחרוזת, לא מאותחל (כללי למטרות שונות)

    string Now = DateTime.Now.ToString("yyyy-mm-dd");
    // מחרוזת המכילה את התאריך הנוכחי בפורמט שנה-חודש-יום (אולי טעות ב-mm זה דקות, אבל זה הסבר השורה)

    DateTime selectedHour = DateTime.Today;
    // משתנה תאריך לשעת התחלה נבחרת, מאותחל להיום (ללא שעה מדויקת)

    string selectedhour = "";
    // מחרוזת לשמירת שעה נבחרת כטקסט

    List<Drill> list;
    // רשימת תרגילים מסוג Drill, לא מאותחל עדיין

    private DateTime selectedDate = DateTime.Today;
    // משתנה תאריך לשמירת תאריך נבחר, מאותחל להיום

    private string maxDate;
    // משתנה מחרוזת לאחסון תאריך מקסימלי (למשל להגבלת תאריכים)

    string error = "";
    // משתנה מחרוזת לאחסון הודעות שגיאה, מאותחל ריק

    string duration = "";
    // משתנה מחרוזת לאחסון משך זמן האימון, מאותחל ריק

    TrainerDB TrainerDB = new TrainerDB();
    // מופע של מחלקת גישה לנתוני מתאמנים במסד הנתונים

    string IsReccuring1 = "false";
    // מחרוזת לשמירת סטטוס האם האימון חוזר, מאותחל ל-"false"

    List<string> DaysOfWeek = new List<string>
    {
        "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"
    };
    // רשימת מחרוזות המכילה את שמות ימות השבוע באנגלית

    private List<string> SelectedOptions = new List<string>();
    // רשימה לשמירת ימות השבוע שנבחרו (למשל לאימונים חוזרים), מאותחל כריק

    private void OnOptionChanged(ChangeEventArgs e, string option)
    {
        bool isChecked = (bool)e.Value;
        // קבלת הערך הבוליאני אם האפשרות נבחרה או לא מתוך אירוע שינוי

        if (isChecked)
        {
            // הוספת האפשרות לרשימה SelectedOptions אם נבחרה
            SelectedOptions.Add(option);
        }
        else
        {
            // הסרת האפשרות מהרשימה אם לא נבחרה
            SelectedOptions.Remove(option);
        }
    }

    async Task CheckReccuring()
    {
        if (SelectedOptions.Count > 0 || SelectedOptions != null)
        {
            // אם נבחרו אפשרויות לימות שבוע

            IsReccuring1 = "true";
            // קובע שהאימון חוזר

            foreach (var d in SelectedOptions)
            {
                // עבור כל יום שנבחר ברשימה

                DayOfWeek dayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), d, true);
                // ממיר מחרוזת של יום לשם ENUM DayOfWeek

                DateTime rd = GetNextDay(DateTime.Today, dayOfWeek);
                // מחשב את התאריך הבא ליום השבוע שנבחר, החל מהיום

                await CreateWorkout(rd, IsReccuring1);
                // יוצר אימון לתאריך המחושב עם סטטוס חוזר
            }
        }

        int a = 0;
        // משתנה לספירת התאמות של יום נבחר ברשימה

        foreach (var d in SelectedOptions)
        {
            if (d == selectedDate.DayOfWeek.ToString())
            {
                a++;
            }
        }
        // סופר אם יום התאריך שנבחר נמצא ברשימת הימים שנבחרו

        if (a == 0)
        {
            // אם יום התאריך הנבחר לא נמצא ברשימה

            await CreateWorkout(selectedDate, "false");
            // יוצר אימון בתאריך הנבחר ללא סטטוס חוזר
        }

        SelectedOptions.Clear();
        // מנקה את רשימת האפשרויות שנבחרו

        selectedDate = DateTime.Today;
        // מאפס את התאריך הנבחר להיום

        selectedHour = new DateTime();
        // מאפס את השעה הנבחרת לערך ברירת מחדל

        duration = "";
        // מאפס את משך האימון למחרוזת ריקה

        StateHasChanged();
        // מרענן את הממשק (UI)
    }

    static DateTime GetNextDay(DateTime startDate, DayOfWeek targetDay)
    {
        // מחשב את התאריך הבא של יום השבוע הרצוי

        int daysToAdd = ((int)targetDay - (int)startDate.DayOfWeek + 7) % 7;
        // מחשב כמה ימים להוסיף כדי להגיע ליום הרצוי, מחושב מודולו 7

        daysToAdd = daysToAdd == 0 ? 7 : daysToAdd;
        // אם היום הרצוי זהה ליום ההתחלה מוסיפים 7 ימים (ליום הבא בשבוע)

        return startDate.AddDays(daysToAdd);
        // מחזיר את התאריך של היום הרצוי הבא
    }

    protected override async Task OnParametersSetAsync()
    {
        if (groupname == null)
        {
            group = null;
            // אם פרמטר הקבוצה ריק, מאפס את המשתנה לקבוצה
        }
        else
        {
            group = await groupDB.SelectByPkAsync(groupname);
            // טוען את פרטי הקבוצה לפי שם הקבוצה מהמסד

            StateHasChanged();
            // מרענן את הממשק

            max = group.maxcapacity;
            // מאחסן את הקיבולת המקסימלית של הקבוצה

            c1 = await coachDB.SelectByPkAsync(group.coachid);
            // טוען את פרטי המאמן של הקבוצה לפי מזהה המאמן
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var name1 = await MySession.GetAsync<Coach>("Coach");
            // מנסה לקבל את המאמן מה-session

            if (name1.Success)
            {
                coach = name1.Value;
                // מאחסן את המאמן אם נמצא

                await LoadUsersInGroup();
                // טוען את המתאמנים בקבוצה

                StateHasChanged();
                // מרענן את הממשק
            }
        }

        if (firstRender)
        {
            var user1 = await MySession.GetAsync<Trainer>("Trainer");
            // מנסה לקבל את המתאמן מה-session

            if (user1.Success)
            {
                c = user1.Value;
                // מאחסן את המתאמן אם נמצא

                await LoadUsersInGroup();
                // טוען את רשימת המשתמשים בקבוצה

                StateHasChanged();
                // מרענן את הממשק
            }
        }
    }

    async Task doEditgroup()
    {
        GroupDB GDB = new GroupDB();
        // יוצר מופע חדש של מחלקת גישה לקבוצות

        if (usersInGroup.Count <= max)
        {
            // בודק אם מספר המתאמנים לא חורג מהמקסימום

            group.maxcapacity = max;
            // מעדכן את הקיבולת המקסימלית של הקבוצה

            int n = await GDB.UpdateAsync(group);
            // מנסה לעדכן את פרטי הקבוצה במסד הנתונים

            if (n > 0)
            {
                await js.InvokeVoidAsync("alert", $"Updated Successfully!");
                // מציג הודעת הצלחה למשתמש
            }
            else
            {
                await js.InvokeVoidAsync("alert", $"Update failed!");
                // מציג הודעת כשלון לעדכון
            }
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"You have too many trainers in group to reduce maximum capacity");
            // מציג הודעה שמשתמשים בקבוצה חורגים מהקיבולת החדשה
        }
    }

    public async Task LoadUsersInGroup()
    {
        TrainerDB userDB = new TrainerDB();
        // יוצר מופע חדש לגישה למתאמנים

        List<Trainer> usersInGroup = await userDB.SelectAllInGroup(groupname);
        // טוען את כל המתאמנים שמשויכים לקבוצה הנוכחית

        this.usersInGroup = usersInGroup;
        // מעדכן את רשימת המתאמנים המקומית

        StateHasChanged();
        // מרענן את הממשק
    }

    async Task RemoveUserFromGroup(int id)
    {
        TrainerDB userDB = new TrainerDB();
        // יוצר מופע חדש לגישה למתאמנים

        Trainer user = await userDB.SelectByPkAsync(id);
        // טוען את המתאמן לפי מזהה

        if (user != null)
        {
            user.groupname = null;
            // מאפס את שייכות הקבוצה למתאמן

            await userDB.UpdateAsync(user);
            // מעדכן את המתאמן במסד הנתונים

            await LoadUsersInGroup();
            // טוען מחדש את רשימת המתאמנים בקבוצה
        }
    }

    async Task RemoveUserFromGroup2(int id)
    {
        TrainerDB userDB = new TrainerDB();
        // יוצר מופע חדש לגישה למתאמנים

        Trainer user = await userDB.SelectByPkAsync(id);
        // טוען את המתאמן לפי מזהה

        if (user != null)
        {
            user.groupname = null;
            // מאפס את שייכות הקבוצה למתאמן

            await userDB.UpdateAsync(user);
            // מעדכן את המתאמן במסד הנתונים

            await MySession.SetAsync("Trainer", user);
            // מעדכן את המתאמן ב-session

            var name = await MySession.GetAsync<Trainer>("Trainer");
            if (name.Success)
            {
                user = name.Value;
                StateHasChanged();
                // מרענן את הממשק לאחר עדכון המשתמש ב-session
            }
            await LoadUsersInGroup();
            // טוען מחדש את רשימת המתאמנים בקבוצה
        }

        navigationManager.NavigateTo("");
        // מנווט מחדש לדף הראשי (או דף ריק)
    }

    async Task JoinGroup(int id)
    {
        TrainerDB userDB = new TrainerDB();
        // יוצר מופע חדש לגישה למתאמנים

        Trainer user = await userDB.SelectByPkAsync(id);
        // טוען את המתאמן לפי מזהה

        if (user != null && usersInGroup.Count < group.maxcapacity)
        {
            user.groupname = groupname;
            // משייך את שם הקבוצה שנבחר למשתמש (user) – עדכון שדה groupname באובייקט

            await userDB.UpdateAsync(user);
            // שומר את העדכון במסד הנתונים דרך מחלקת הגישה ל-DB (המשתמש עודכן עם שם הקבוצה החדש)

            await MySession.SetAsync("Trainer", user);
            // שומר את המשתמש המעודכן בסשן תחת המפתח "Trainer" – כדי שתהיה גישה אליו בדפים אחרים

            var name = await MySession.GetAsync<Trainer>("Trainer");
            // שולף מהסשן את הנתונים של המשתמש המאוחסן תחת המפתח "Trainer"

            if (name.Success)
            // בודק אם השליפה מהסשן הצליחה

            {
                c = name.Value;
                // אם הצליח – משייך את המשתמש שהתקבל למשתנה `c` (כנראה מוצג בדף)

                StateHasChanged();
                // מורה ל-Blazor לרנדר מחדש את הקומפוננטה כדי להציג את המידע המעודכן
            }

            await LoadUsersInGroup();
            // טוען מחדש את רשימת המשתמשים בקבוצה (כנראה כדי לרענן את ההצגה אחרי שהמשתמש הצטרף)

            StateHasChanged();
            // רענון נוסף לרנדר של הקומפוננטה כדי לוודא שהמידע החדש מוצג נכון
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"The group is full!");
            // מציג הודעת שגיאה כשהקבוצה מלאה
        }
    }



    async Task Delete(string gname)
    {
        TrainerDB trainerDB = new TrainerDB();
        // יצירת מופע של מחלקת TrainerDB לניהול מאגר המאמנים

        List<Trainer> TS = await trainerDB.SelectAllInGroup(gname);
        // שאילתת כל המאמנים המשתייכים לקבוצה בשם gname

        GroupDB groupDB = new GroupDB();
        // יצירת מופע של מחלקת GroupDB לניהול מאגר הקבוצות

        Group group = await groupDB.SelectByPkAsync(gname);
        // שליפת פרטי הקבוצה לפי המפתח gname

        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {group.name}?"))
        // הצגת חלון אישור למשתמש לפני מחיקת הקבוצה

        {
            foreach (Trainer trainer in TS)
            {
                trainer.groupname = null;
                // ביטול השיוך של המאמן לקבוצה

                int n = await trainerDB.UpdateAsync(trainer);
                // עדכון המאמן במאגר הנתונים לאחר שינוי השיוך
            }

            coach.groupname = null;
            // ביטול השיוך של המאמן הראשי לקבוצה

            int a = await coachDB.UpdateAsync(coach);
            // עדכון המאמן הראשי במאגר הנתונים

            if (a > 0)
            {
                await MySession.SetAsync("Coach", coach);
                // שמירת מידע מעודכן של המאמן הראשי במשתמש המושב (session)

                var name = await MySession.GetAsync<Coach>("Coach");
                // שליפת מידע המאמן המעודכן מתוך המושב

                if (name.Success)
                {
                    coach = name.Value;
                    // עדכון משתנה המאמן הראשי עם הערך המעודכן

                    StateHasChanged();
                    // רענון הממשק להגדרת השינויים
                }
            }

            await groupDB.DeleteAsync(group);
            // מחיקת הקבוצה ממאגר הנתונים

            await OnInitializedAsync();
            // אתחול מחדש של רכיב או דף כדי לרענן נתונים

            navigationManager.NavigateTo("/");
            // ניווט לדף הבית לאחר המחיקה
        }
    }

    async Task CreateWorkout(DateTime date, string isReccuring2)
    {
        WorkoutDB workoutDB = new WorkoutDB();
        // יצירת מופע לניהול מאגר אימונים

        DrillsListDB drillsListDB = new DrillsListDB();
        // יצירת מופע לניהול רשימת תרגילים (לא מנוצל בפועל בקוד זה)

        int totalDuration = (int.Parse(duration)) * 60;
        // המרת משך האימון משניות לדקות (או להפך) - המרה של מחרוזת למספר שלם

        int hourAsInt = ConvertDateTimeToInt(selectedHour);
        // המרת זמן נבחר (DateTime) למספר שלם בפורמט שעה ודקות (HHmm)

        if (hourAsInt == -1)
        {
            Console.WriteLine("Invalid DateTime input. Workout creation aborted.");
            // הדפסת שגיאה אם זמן לא תקין

            return;
            // יציאה מהפונקציה במקרה של שגיאה בזמן
        }

        List<Trainer> LT = await TrainerDB.SelectAllInGroup(groupname);
        // שליפת כל המאמנים בקבוצה בשם groupname

        foreach (var t in LT)
        {
            Workout newWorkout = new Workout
                {
                    trainerid = t.id,
                    // זיהוי המאמן המשויך לאימון

                    date = date.ToString("yyyy-MM-dd"),
                    // המרת תאריך האימון לפורמט מחרוזת "שנה-חודש-יום"

                    duration = totalDuration,
                    // הגדרת משך האימון בשניות

                    Isgroup = "true",
                    // סימון שהאימון הוא קבוצתי (מחרוזת "true")

                    hour = hourAsInt,
                    // הגדרת שעה כמספר שלם בפורמט HHmm

                    IsReccuring = isReccuring2
                    // הגדרת האם האימון הוא מחזורי בהתאם לפרמטר שהתקבל
                };

            Workout createdWorkout = await workoutDB.InsertGetWorkout(newWorkout);
            // הוספת האימון למסד הנתונים וקבלת האובייקט שנוצר כולל ה-ID

            if (createdWorkout != null)
            {
                int workoutId = createdWorkout.id;
                // אחסון ה-ID של האימון שנוצר (לא מנוצל בהמשך הקוד)
            }
        }
    }

    private int ConvertDateTimeToInt(DateTime dateTime)
    {
        int combined = dateTime.Hour * 100 + dateTime.Minute;
        // המרת זמן לייצוג מספרי בפורמט HHmm (למשל 13:45 יהפוך ל-1345)

        return combined;
        // החזרת המספר המיוצג
    }


}
