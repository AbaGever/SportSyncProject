@page "/ShowG/{groupname}"
@using Models2
@using DBL2
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime js

@if (coach != null && group != null && group.coachid == coach.id || c != null)
{
    @if (coach != null)
    {
        <section class="py-1">
            <div class="container px-4 px-lg-5 my-5">
                <div class="row gx-4 gx-lg-5 align-items-center">

                    <br />

                    <div class="col-md-6">
                        <h1 class="display-5 fw-bolder">@group.name</h1>
                        <strong>
                            <h2>
                                Sport : @group.sport <br /> Max Capacity : @group.maxcapacity <br />
                            </h2>
                            <h1 class="display-5 fw-bolder"> Coach Info <br />@coach.firstName   @coach.lastName</h1>
                            <h2>
                                Email: @coach.emailaddress
                                <br />Experience: @coach.exp
                            </h2>
                        </strong>
                    </div>

                    <div>
                        <h1 class="h3 mb-3 font-weight-normal">Edit Group</h1>

                        <label for="inputEmail" class="sr-only">Max Capacity</label>
                        <input @bind-value="group.maxcapacity" type="int" class="form-control m-1" placeholder="Max capacity">
                        <button @onclick="doEditgroup" class="btn btn-lg btn-primary btn-block m-1" type="submit">Update</button>

                        <div> <br /> <br /> </div>
                    </div>

                </div>

                <!-- Table for Users in the Group (Visible to both Coach and Regular User) -->
                @if (usersInGroup != null && usersInGroup.Count > 0)
                {
                    <center>
                        <h2 class="mt-5">Players in Group</h2>

                        <table class="table">

                            <thead>
                                <tr>
                                    <th>First Name</th>
                                    <th>Last Name</th>
                                    @if (coach != null) // If coach is logged in, show delete button
                                    {
                                        <th>Action</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in usersInGroup)
                                {
                                    <tr>
                                        <td>@user.firstName</td>
                                        <td>@user.lastName</td>
                                        @if (coach != null) // If coach is logged in, show delete button
                                        {
                                            <td>
                                                <button style="background-color:red" @onclick="() => RemoveUserFromGroup(user.id)" class="btn btn-danger">Remove</button>
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </center>
                }


            </div>
        </section>
    }
    else if (c != null && c.groupname == group.name)
    {
        @* If user is not a coach, show only the table without the delete button *@
        <section class="py-1">
            <div class="container px-4 px-lg-5 my-5">
                <div class="row gx-4 gx-lg-5 align-items-center">
                    <div class="col-md-6">
                        <h1 class="display-5 fw-bolder">@group.name</h1>
                        <h2>
                            Sport: @group.sport <br />
                            Max Capacity: @group.maxcapacity <br />
                        </h2>
                    </div>
                </div>
            </div>

            <!-- Table for Users in the Group (Visible for regular user as well) -->
            @if (usersInGroup != null && usersInGroup.Count > 0)
            {
                <center>
                    <h2 class="mt-5">Players in Group</h2>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>First Name</th>
                                <th>Last Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in usersInGroup)
                            {
                                <tr>
                                    <td>@user.firstName</td>
                                    <td>@user.lastName</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </center>
            }
            <center>
                <button style="background-color:darkred;padding:10px 30px" @onclick="() => RemoveUserFromGroup2(c.id)" class="btn btn-lg btn-primary btn-block m-1">Leave Group</button>
            </center>
        </section>
    }
    else if (c != null && c.groupname == "" || c != null && c.groupname == null)
    {

    }
}

@code {
    [Parameter]
    public string groupname { get; set; }
    Coach coach = null;
    Trainer c = null;
    Group group = null;
    private string Name = "";
    private string max = "";
    List<Trainer> usersInGroup = new List<Trainer>();

    GroupDB groupDB = new GroupDB();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var name1 = await MySession.GetAsync<Coach>("Coach");
            if (name1.Success)
            {
                coach = name1.Value;
                Group group = await groupDB.SelectByPkAsync(groupname);
                await LoadUsersInGroup();

                StateHasChanged();
            }

            var user1 = await MySession.GetAsync<Trainer>("User");
            if (user1.Success)
            {
                c = user1.Value;
                Group group = await groupDB.SelectByPkAsync(groupname);
                await LoadUsersInGroup();               
                StateHasChanged();
            }

            if ((coach == null && c == null) || (coach != null && string.IsNullOrEmpty(coach.groupname)) || (c != null && string.IsNullOrEmpty(c.groupname)))
            {
                navigationManager.NavigateTo("/");
            }
        }
    }

    async Task doEditgroup()
    {
        GroupDB GDB = new GroupDB();

        if (Name == "")
        {
            Name = group.name;
        }
        if (max == "")
        {
            max = group.maxcapacity.ToString();
        }

        int n = await GDB.UpdateAsync(group);

        if (n > 0)
        {
            await js.InvokeVoidAsync("alert", $"Updated Successfully!");
            await MySession.SetAsync("Group", group);
            var name = await MySession.GetAsync<Group>("Group");
            if (name.Success)
            {
                group = name.Value;
                StateHasChanged();
            }
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Update failed!");
        }
    }

    public async Task LoadUsersInGroup()
    {
        string groupName = group.name;
        TrainerDB userDB = new TrainerDB();
        List<Trainer> usersInGroup = await userDB.SelectAllInGroup(groupName);

        this.usersInGroup = usersInGroup;

        StateHasChanged();
    }

    async Task RemoveUserFromGroup(int id)
    {
        TrainerDB userDB = new TrainerDB();
        Trainer user = await userDB.SelectByPkAsync(id);

        if (user != null)
        {
            user.groupname = null;
            await userDB.UpdateAsync(user);
            await LoadUsersInGroup();
        }
    }
    async Task RemoveUserFromGroup2(int id)
    {
        TrainerDB userDB = new TrainerDB();
        Trainer user = await userDB.SelectByPkAsync(id);

        if (user != null)
        {
            user.groupname = null;
            await userDB.UpdateAsync(user);
            await MySession.SetAsync("User", user);
            var name = await MySession.GetAsync<Trainer>("User");
            if (name.Success)
            {
                user = name.Value;
                StateHasChanged();
            }
            await LoadUsersInGroup();
        }
        navigationManager.NavigateTo("");

    }

}
