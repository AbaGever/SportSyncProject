@page "/reset-password"
@using Models2
@using DBL2
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime js


<body>
    <center> 
        <div class="hero_area">
            <!-- header section strats -->
            <div class="container-fluid">
                <nav class="navbar navbar-expand-lg custom_nav-container ">
                    <a class="navbar-brand" href="/">
                        <span>
                            SportSync
                        </span>
                    </a>
                    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>

                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                            <ul class="navbar-nav">
                                <li class="nav-item active">
                                    <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                                </li>


                                <li class="nav-item">
                                    <a class="nav-link" href="/r">Sign Up</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="/login">Log In</a>
                                </li>

                                <li class="nav-item">
                                    <a class="nav-link" href="/searchG">Search Groups</a>
                                </li>


                            </ul>
                            <div class="user_option">
                                <div class="form-inline my-2 my-lg-0 ml-0 ml-lg-4 mb-3 mb-lg-0">
                                    <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit"></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </nav>
            </div>

            <h2>
                <div class="detail-box" style="color:white">
                    <div style="margin:100px">

                        <h1>Forgot Password Token</h1>
                        @if (!codeSent)
                        {

                            <label>Email Address</label>
                            <br/>
                            <input @bind="email" />
                            <br />
                            <button @onclick="SendResetCode">Send Code</button>
                            <p>@message</p>
                        }
                        else if (!codeConfirmed)
                        {
                            <label>Enter Code</label>
                            <input @bind="codeInput" />
                            <button @onclick="ConfirmCode">Confirm Code</button>
                            <p>@message</p>
                        }
                        else
                        {
                            <label>New Password</label>
                            <input type="password" @bind="newPassword" />
                            <label>Confirm Password</label>
                            <input type="password" @bind="confirmPassword" />
                            <button @onclick="ResetPassword">Reset Password</button>
                            <p>@message</p>
                        }

                    </div>
                </div>
            </h2>

            <!-- end slider section -->
        </div>
    </center>
</body>
<style>
    .button-73 {
    appearance: none;
    background-color: #FFFFFF;
    border-radius: 40em;
    border-style: none;
    box-shadow: #ADCFFF 0 -12px 6px inset;
    box-sizing: border-box;
    color: #000000;
    cursor: pointer;
    display: inline-block;
    font-family: -apple-system,sans-serif;
    font-size: 1.2rem;
    font-weight: 700;
    letter-spacing: -.24px;
    margin: 0;
    outline: none;
    padding: 1rem 1.3rem;
    quotes: auto;
    text-align: center;
    text-decoration: none;
    transition: all .15s;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    }

    .button-73:hover {
    background-color: #FFC229;
    box-shadow: #FF6314 0 -6px 8px inset;
    transform: scale(1.125);
    }

    .button-73:active {
    transform: scale(1.025);
    }

    @@media (min-width: 768px) {
    .button-73 {
    font-size: 1.5rem;
    padding: .75rem 2rem;
    }
    }

    @@import url('https://fonts.googleapis.com/css?family=Poppins:400,500,600,700&display=swap');

    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
    }

    body {
    background: -webkit-linear-gradient(bottom, #E0DCC8, #3a506b);
    }

    .container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    font-family: 'Montserrat', sans-serif;
    height: 100vh;
    margin: 0;
    }



    button {
    border-radius: 20px;
    border: 1px solid #FF4B2B;
    background-color: #FF4B2B;
    color: #FFFFFF;
    font-size: 12px;
    font-weight: bold;
    padding: 12px 45px;
    letter-spacing: 1px;
    text-transform: uppercase;
    transition: transform 80ms ease-in;
    cursor: pointer;
    }

    button:active {
    transform: scale(0.95);
    }

    button.ghost {
    background-color: transparent;
    border-color: #FFFFFF;
    }

    input {
    background-color: #eee;
    border: none;
    padding: 12px 15px;
    margin: 8px 0;
    width: 50%;
    }

    h1 {
    font-weight: bold;
    margin: 0;
    margin-bottom: 15px;
    }

    p {
    font-size: 14px;
    font-weight: 100;
    line-height: 20px;
    letter-spacing: 0.5px;
    margin: 20px 0 30px;
    }
</style>
@code {

    private string email;
    // משתנה לשמירת כתובת האימייל שהמשתמש מזין

    private string codeInput;
    // משתנה לשמירת קוד האימות שהמשתמש מזין

    private string newPassword;
    // משתנה לסיסמה החדשה שהמשתמש מזין

    private string confirmPassword;
    // משתנה לאישור סיסמה חדשה שהמשתמש מזין

    private string resetCode;
    // משתנה לשמירת קוד האיפוס שנשלח למייל

    private string message;
    // משתנה להצגת הודעות למשתמש

    private bool codeSent = false;
    // דגל המציין האם קוד האיפוס נשלח

    private bool codeConfirmed = false;
    // דגל המציין האם הקוד שהוזן אומת בהצלחה

    private async Task SendResetCode()
    {
        CoachDB coachDB = new CoachDB();
        // יצירת מופע לניהול מאגר המאמנים

        Coach coach = await coachDB.EmailCheck(email);
        // בדיקת קיום אימייל במאגר המאמנים

        TrainerDB tdb = new TrainerDB();
        // יצירת מופע לניהול מאגר המאמנים

        Trainer trainer = await tdb.EmailCheck(email);
        // בדיקת קיום אימייל במאגר המאמנים

        if (trainer == null && coach == null)
        // בדיקה אם האימייל לא קיים בשני המאגרות

        {
            message = "Email Doesnot Exist ";
            // הצגת הודעה שהאימייל לא קיים

            return;
            // יציאה מהפונקציה
        }

        if (string.IsNullOrEmpty(email) && email.Contains("@gmail"))
        // בדיקה אם האימייל ריק וכולל "@gmail"

        {
            message = "Enter You Email";
            // הצגת הודעה להזנת האימייל

            return;
            // יציאה מהפונקציה
        }

        resetCode = new Random().Next(100000, 999999).ToString();
        // יצירת קוד איפוס אקראי בן 6 ספרות

        try
        {
            var emailService = new EmailService();
            // יצירת מופע שירות שליחת אימיילים

            await emailService.SendEmailAsync(
                email,
                // כתובת המייל של המשתמש

                "Password Reset Request",
                // נושא האימייל

                $"Your code : {resetCode}",
                // תוכן האימייל עם קוד האיפוס

                "razperli100@gmail.com"
            // כתובת השולח
            );

            codeSent = true;
            // סימון שהקוד נשלח

            message = "Code Sent";
            // הצגת הודעה שהקוד נשלח
        }
        catch (Exception ex)
        {
            message = $"Error in Sending: {ex.Message}";
            // הצגת הודעת שגיאה במקרה של כשל בשליחת האימייל
        }
    }

    private void ConfirmCode()
    {
        if (codeInput == resetCode)
        // בדיקה אם הקוד שהוזן תואם לקוד שנשלח

        {
            codeConfirmed = true;
            // סימון שהקוד אומת בהצלחה

            message = "Code Validated";
            // הצגת הודעה שהקוד נכון
        }
        else
        {
            message = "The Code is Wrong";
            // הצגת הודעה שהקוד שהוזן שגוי
        }
    }

    private async void ResetPassword()
    {
        CoachDB coachDB = new CoachDB();
        // יצירת מופע לניהול מאגר המאמנים

        Coach coach = await coachDB.EmailCheck(email);
        // בדיקת קיום אימייל במאגר המאמנים

        TrainerDB tdb = new TrainerDB();
        // יצירת מופע לניהול מאגר המאמנים

        Trainer trainer = await tdb.EmailCheck(email);
        // בדיקת קיום אימייל במאגר המאמנים

        if (trainer == null && coach == null)
        // בדיקה אם האימייל לא קיים בשני המאגרות

        {
            message = "Email is wrong";
            // הצגת הודעה שהאימייל שגוי

            return;
            // יציאה מהפונקציה
        }

        if (string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
        // בדיקה אם אחת מהסיסמאות החדשות ריקה

        {
            message = "Please Fill Every Input";
            // הצגת הודעה שיש למלא את כל השדות

            return;
            // יציאה מהפונקציה
        }

        if (newPassword != confirmPassword)
        // בדיקה אם הסיסמאות החדשות אינן תואמות

        {
            message = "Passwords are not matching ";
            // הצגת הודעה שהסיסמאות לא תואמות

            return;
            // יציאה מהפונקציה
        }

        if (coach == null)
        // בדיקה אם המשתמש הוא מאמן ולא מאמן קבוצת מאמנים

        {
            trainer.password = newPassword;
            // עדכון הסיסמה החדשה במאמן

            int n = await tdb.UpdateAsyncWithoutGroup(trainer);
            // עדכון רשומת המאמן במסד הנתונים ללא שינוי קבוצה

            if (n > 0)
            // בדיקה אם העדכון בוצע בהצלחה

            {
                message = "Password changed succesfuly";
                // הצגת הודעה שהסיסמה שונתה בהצלחה

                await Task.Delay(3000);
                // השהייה של 3 שניות לפני פעולה נוספת

                StateHasChanged();
                // רענון הממשק

                navigationManager.NavigateTo("/");
                // ניווט לעמוד הראשי

                return;
                // יציאה מהפונקציה
            }
        }

        if (trainer == null)
        // בדיקה אם המשתמש הוא מאמן קבוצת מאמנים ולא מאמן רגיל

        {
            coach.password = newPassword;
            // עדכון הסיסמה החדשה במאמן הקבוצה

            int n = await coachDB.UpdateAsyncWithoutGroup(coach);
            // עדכון רשומת המאמן במסד הנתונים ללא שינוי קבוצה

            if (n > 0)
            // בדיקה אם העדכון בוצע בהצלחה

            {
                message = "Password changed succesfuly";
                // הצגת הודעה שהסיסמה שונתה בהצלחה

                await Task.Delay(3000);
                // השהייה של 3 שניות לפני פעולה נוספת

                StateHasChanged();
                // רענון הממשק

                navigationManager.NavigateTo("/");
                // ניווט לעמוד הראשי

                return;
                // יציאה מהפונקציה
            }
        }

    }
}
