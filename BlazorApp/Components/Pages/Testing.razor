@page "/t"
@using Models2
@using DBL2
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
<HeadContent>
    <!-- Basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Mobile Metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Site Metas -->
    <meta name="keywords" content="">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>SportSync</title>
    <link rel="icon" href="/download.png">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins">

    <!-- slider stylesheet -->
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">

    <!-- bootstrap core css -->
    <link rel="stylesheet" type="text/css" href="homepage/css/bootstrap.css">

    <!-- fonts style -->
    <link href="https://fonts.googleapis.com/css?family=Poppins:400,600,700&amp;display=swap" rel="stylesheet">
    <!-- Custom styles for this template -->
    <link href="homepage/css/style.css" rel="stylesheet">
    <!-- responsive style -->
    <link href="homepage/css/responsive.css" rel="stylesheet">
</HeadContent>



<!-- header section strats -->

<div class="container-fluid">
    <nav class="navbar navbar-expand-lg custom_nav-container ">
        <a class="navbar-brand" href="/">
            <span>
                SportSync
            </span>
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                <ul class="navbar-nav  ">
                    <li class="nav-item active">
                        <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                    </li>

                    @if (UserS == null)
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/r">Sign Up</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/login">Log In</a>
                        </li>
                    }

                    <li class="nav-item">
                        <a class="nav-link" href="/p">Your Profile</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/searchG">Search Groups</a>
                    </li>


                </ul>
                <div class="user_option">
                    <div class="form-inline my-2 my-lg-0 ml-0 ml-lg-4 mb-3 mb-lg-0">
                        <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit"></button>
                    </div>
                </div>
            </div>
        </div>
    </nav>
</div>
<div>
    <center>
        <h3 style="color:white">Workout Management</h3>
    </center>

    <div class="left-aligned">
        <div class="search-area">
            <center>
                <select @onchange="OnChange">
                    <option value="default">None</option>
                    @foreach (string m in Muscles)
                    {
                        <option value="@m">@m</option>
                    }
                </select>

                <input @bind-value="nameofdrill" placeholder="Search Group By Sport" />
                <button class="button-73" @onclick="Search">Search Drills</button>



                @if (list == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <div class="table-container">
                        <table style="width:100%">
                            <thead>
                                <tr>
                                    <th><center>Name</center></th>
                                    <th><center>Muscle</center></th>
                                    <th><center>Sets</center></th>
                                    <th><center>Reps</center></th>
                                    <th><center>Duration</center></th>
                                    <th><center>Description</center></th>
                                    <th><center>Actions</center></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in list)
                                {
                                    <tr>
                                        <td><center>@item.name</center></td>
                                        <td><center>@item.muscle</center></td>
                                        <td><center>@item.sets</center></td>
                                        <td><center>@item.reps</center></td>
                                        <td><center>@(item.duration) Seconds</center></td>
                                        <td><center>@item.description</center></td>
                                        <td>
                                            <center>
                                                <button class="button-73" @onclick="() => AddDrillToWorkout(item.name)">Add</button>
                                            </center>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </center>
        </div>
    </div>

    <center>
        <div class="workout-container">
            <div class="selected-drills-area">
                <center>
                    <div class="selected-drills-container">
                        <h4>Selected Drills</h4>
                        <ul>
                            @foreach (var drill in selectedDrills)
                            {
                                <li>
                                    @drill
                                    <button class="button-24" @onclick="() => RemoveDrill(drill)">Remove</button>
                                </li>
                            }
                        </ul>
                    </div>
                </center>
            </div>
        </div>
    </center>
    <div class="right-aligned">

        <center style="width: 500px;
        padding: 20px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 10px;">

                    <input @bind="selectedDate" type="date" min="@time" max="@maxDate" />
                    <input type="time" id="appt" name="appt" @bind-value="selectedHour" required />

                    <button class="button-73" @onclick="CreateWorkout">Create Workout</button>
            </center>
        
    </div>
</div>
                   

<style>

    @@import url('https://fonts.googleapis.com/css?family=Poppins:400,500,600,700&display=swap');

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Poppins', sans-serif;
    }

    html, body {
        width: 100%;
        height: 100%;
        place-items: center;
        background: #FFBF00;
    }

    .left-aligned {
        position: absolute;
        left: 0;
    }

    .right-aligned {
        
        position: absolute;
        right: 20px;
        margin-top:-100px;
    }

    <!-- HTML ! -->
    /* CSS */
    .button-24 {
        background: #FF4742;
        border: 1px solid #FF4742;
        border-radius: 6px;
        box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;
        box-sizing: border-box;
        color: #FFFFFF;
        cursor: pointer;
        display: inline-block;
        font-family: nunito,roboto,proxima-nova,"proxima nova",sans-serif;
        font-size: 16px;
        font-weight: 800;
        line-height: 16px;
        min-height: 40px;
        outline: 0;
        padding: 12px 14px;
        text-align: center;
        text-rendering: geometricprecision;
        text-transform: none;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        vertical-align: middle;
    }

    .button-24:hover,
    .button-24:active {
        background-color: initial;
        background-position: 0 0;
        color: #FF4742;
    }

    .button-24:active {
        opacity: .5;
    }

    .button-73 {
        appearance: none;
        background-color: #FFFFFF;
        border-radius: 40em;
        border-style: none;
        box-shadow: #ADCFFF 0 -12px 6px inset;
        box-sizing: border-box;
        color: #000000;
        cursor: pointer;
        display: inline-block;
        font-family: -apple-system,sans-serif;
        font-size: 1.2rem;
        font-weight: 700;
        letter-spacing: -.24px;
        margin: 0;
        outline: none;
        padding: 1rem 1.3rem;
        quotes: auto;
        text-align: center;
        text-decoration: none;
        transition: all .15s;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
    }

        .button-73:hover {
            background-color: #FFC229;
            box-shadow: #FF6314 0 -6px 8px inset;
            transform: scale(1.125);
        }

        .button-73:active {
            transform: scale(1.025);
        }

    @@media (min-width: 768px) {
        .button-73 {
            /*   font-size: 1.5rem;
                                        padding: .75rem 2rem; */
        }
    }

    ::selection {
        background: Grey;
        color: #fff;
    }

    .wrapper {
        overflow: hidden;
        margin: auto;
        max-width: 500px;
        background: #fff;
        padding: 30px;
        border-radius: 5px;
        box-shadow: 0px 15px 20px rgba(0,0,0,0.1);
    }

        .wrapper .title-text {
            display: flex;
            width: 200%;
        }

        .wrapper .title {
            width: 50%;
            font-size: 35px;
            font-weight: 600;
            text-align: center;
            transition: all 0.6s cubic-bezier(0.68,-0.55,0.265,1.55);
        }

        .wrapper .slide-controls {
            position: relative;
            display: flex;
            height: 50px;
            width: 100%;
            overflow: hidden;
            margin: 30px 0 10px 0;
            justify-content: space-between;
            border: 1px solid lightgrey;
            border-radius: 5px;
        }

    .slide-controls .slide {
        height: 100%;
        width: 100%;
        color: #fff;
        font-size: 18px;
        font-weight: 500;
        text-align: center;
        line-height: 48px;
        cursor: pointer;
        z-index: 1;
        transition: all 0.6s ease;
    }

    .slide-controls label.Coach {
        color: #000;
    }

    .slide-controls .slider-tab {
        position: absolute;
        height: 100%;
        width: 50%;
        left: 0;
        z-index: 0;
        border-radius: 5px;
        background: -webkit-linear-gradient(left, white,Grey,Grey,white);
        transition: all 0.6s cubic-bezier(0.68,-0.55,0.265,1.55);
    }

    input[type="radio"] {
        display: none;
    }

    .workout-container {
        display: grid;
        gap: 20px;
        margin-top: 20px;
    }

    .search-area {
        margin-left: 20px;
        width: 100%;
        color: black;
        padding: 20px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 10px;
    }

    .selected-drills-area {
        margin-left: 450px;
        width: 500px;
        padding: 20px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 10px;
        height: fit-content;
    }

    .table-container {
        margin-top: 20px;
        overflow-x: auto;
    }

    .selected-drills-container {
        color: black;
        position: sticky;
        top: 20px;
    }

        .selected-drills-container ul {
            list-style: none;
            padding: 0;
        }

        .selected-drills-container li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin: 5px 0;
            background: #f5f5f5;
            border-radius: 5px;
            color: black;
        }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .workout-container {
            grid-template-columns: 1fr;
        }

        .selected-drills-area {
            margin-top: 20px;
        }
    }

</style>
<script src="homepage/js/jquery-3.4.1.min.js"></script>
<script src="homepage/js/bootstrap.js"></script>
@code {

    string Now = DateTime.Now.ToString("yyyy-mm-dd");
    DateTime selectedHour;
    string selectedhour = "";
    List<Drill> list;
    string nameofdrill = "";
    string selectedmuscle = "";
    time time = new time();
    private DateTime selectedDate = DateTime.Today;
    private string maxDate;
    List<string> Muscles = new List<string>
    {
    "Aerobic","Arms","Back","Chest","Core","Full Body","Legs","Shoulders"
    };
    Trainer UserS = null;

    // State to store selected drills for the workout
    List<string> selectedDrills = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user1 = await MySession.GetAsync<Trainer>("Trainer");
            if (user1.Success)
            {
                UserS = user1.Value;
                StateHasChanged();
            }

            else
            {
                if (UserS == null)
                {
                    navigationManager.NavigateTo("/");
                }
            }
        }

    }
    private void OnChange(ChangeEventArgs args)
    {
        selectedmuscle = args.Value.ToString();
    }

    async Task Search()
    {
        DrillDB drillDB = new DrillDB();
        list = await drillDB.SelectByMuscleOrNameAsync(nameofdrill, selectedmuscle);
    }

    void AddDrillToWorkout(string drillName)
    {
        if (!selectedDrills.Contains(drillName))
        {
            selectedDrills.Add(drillName);
        }
    }

    void RemoveDrill(string drillName)
    {
        selectedDrills.Remove(drillName);
    }

    async Task CreateWorkout()
    {
        WorkoutDB workoutDB = new WorkoutDB();
        DrillsListDB drillsListDB = new DrillsListDB();

        int totalDuration = 0;

        // Calculate total duration of the selected drills
        foreach (var selectedDrillName in selectedDrills)
        {
            foreach (var drill in list)
            {
                if (drill.name == selectedDrillName)
                {
                    totalDuration += drill.duration;
                    break;
                }
            }
        }

        // Convert the selected DateTime to an integer
        int hourAsInt = ConvertDateTimeToInt(selectedHour);
        if (hourAsInt == -1)
        {
            Console.WriteLine("Invalid DateTime input. Workout creation aborted.");
            return;
        }

        // Create a new workout instance
        Workout newWorkout = new Workout
            {
                trainerid = UserS.id, // Assuming this is the ID of the currently logged-in trainer
                date = selectedDate.ToString("yyyy-MM-dd"),
                duration = totalDuration,
                Isgroup = "false",
                hour = hourAsInt // Convert the integer to string for storage
            };

        // Insert the workout using InsertGetWorkout and retrieve the workout object with the new ID
        Workout createdWorkout = await workoutDB.InsertGetWorkout(newWorkout);

        if (createdWorkout != null)
        {
            int workoutId = createdWorkout.id;

            // Associate each selected drill with the new workout
            foreach (var drillName in selectedDrills)
            {
                drillslist dl = new drillslist(workoutId, drillName);
                await drillsListDB.InsertDLAsync(dl);
            }

            // Clear the selection and notify the user
            selectedDrills.Clear();
            list = null; // Reset the drill list
            await Task.Yield(); // Re-render the UI
            Console.WriteLine("Workout created successfully!");
        }
        else
        {
            Console.WriteLine("Failed to create workout.");
        }
    }

    private int ConvertDateTimeToInt(DateTime dateTime)
    {
        // Combine the hour and minute into an integer
        int combined = dateTime.Hour * 100 + dateTime.Minute;
        return combined;
    }

    protected override void OnInitialized()
    {
        // Calculate the maximum date (next month)
        var today = DateTime.Today;
        var nextMonth = today.AddMonths(1);

        // Convert to string in "yyyy-MM-dd" format
        maxDate = nextMonth.ToString("yyyy-MM-dd");
    }
}
