@page "/r"
@using MySql.Data.MySqlClient;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@using Models2
@using DBL2
@using Microsoft.JSInterop
@inject IJSRuntime JS

<center>
    <header class="header_section">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg custom_nav-container ">
                <a class="navbar-brand" href="/">
                    <span>
                        SportSync
                    </span>
                </a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                        <ul class="navbar-nav  ">
                            <li class="nav-item active">
                                <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                            </li>

                            <li class="nav-item">
                                <a class="nav-link" href="/login">Log In</a>
                            </li>


                            <li class="nav-item">
                                <a class="nav-link" href="/searchG">Search Groups</a>
                            </li>

                        </ul>
                        <div class="user_option">
                            <form class="form-inline my-2 my-lg-0 ml-0 ml-lg-4 mb-3 mb-lg-0">
                                <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit"></button>
                            </form>
                        </div>
                    </div>
                </div>
            </nav>
        </div>
    </header>
    <div class="container">
        <section style="flex:0;width:1000px;" class=" slider_section position-relative">
            <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <div class="carousel-item active">

                        <div class="col-lg-10 col-md-11 mx-auto">
                            <div class="detail-box">
                                <div >
                                    <h1>Register</h1>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </section>
        <div class="panel @panelClass">
            <div class="form-container sign-up-container">
                <h1>Register</h1>
                <input type="text" placeholder="First Name" @bind-value="@coach.firstName" />
                <input type="text" placeholder="Last Name" @bind-value="@coach.lastName" />
                <input type="email" placeholder="Email" @bind-value="@coach.emailaddress" />
                <input type="text" placeholder="Phone Number" @bind-value="@coach.phonenumber" />
                <input type="password" placeholder="Password" @bind-value="@coach.password" />
                <select class="form-control mb-3" @onchange="OnChange">
                    <option value="default">Select Your Sport</option>
                    @foreach (string m in Sports)
                    {
                        <option value="@m">@m</option>
                    }
                </select>
                <input type="number" placeholder="Experiece" @bind-value="@coach.exp" />
                <button class="button-73" @onclick="RegCoach">Register</button>
            </div>
            <div class="form-container sign-in-container">
                <h1>Register</h1>
                <input type="text" placeholder="First Name" @bind-value="@cus.firstName" />
                <input type="text" placeholder="Last Name" @bind-value="@cus.lastName" />
                <input type="email" placeholder="Email" @bind-value="@cus.emailaddress" />
                <input type="text" placeholder="Phone Number" @bind-value="@cus.phonenumber" />
                <input type="password" placeholder="Password" @bind-value="@cus.password" />
                <button class="button-73" @onclick="RegTrainer">Register</button>


            </div>
            <div class="overlay-container">
                <div class="overlay">
                    <div class="overlay-panel overlay-left">
                        <h1>Welcome</h1>
                        <p>Are You a Trainer?</p>
                        <button class="ghost" @onclick="TogglePanel">Register here</button>
                    </div>
                    <div class="overlay-panel overlay-right">
                        <h1>Hi!</h1>
                        <p>Are You a Coach?</p>
                        <button class="ghost" @onclick="TogglePanel">Register Here</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</center>
<style>

    .button-73 {
    appearance: none;
    background-color: #FFFFFF;
    border-radius: 40em;
    border-style: none;
    box-shadow: #ADCFFF 0 -12px 6px inset;
    box-sizing: border-box;
    color: #000000;
    cursor: pointer;
    display: inline-block;
    font-family: -apple-system,sans-serif;
    font-size: 1.2rem;
    font-weight: 700;
    letter-spacing: -.24px;
    margin: 0;
    outline: none;
    padding: 1rem 1.3rem;
    quotes: auto;
    text-align: center;
    text-decoration: none;
    transition: all .15s;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    }

    .button-73:hover {
    background-color: #FFC229;
    box-shadow: #FF6314 0 -6px 8px inset;
    transform: scale(1.125);
    }

    .button-73:active {
    transform: scale(1.025);
    }

    @@media (min-width: 768px) {
    .button-73 {
    font-size: 1.5rem;
    padding: .75rem 2rem;
    }
    }


    @@import url('https://fonts.googleapis.com/css?family=Poppins:400,500,600,700&display=swap');

    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
    }

    body {
    background: -webkit-linear-gradient(bottom, #E0DCC8, #3a506b);
    }

    .container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    font-family: 'Montserrat', sans-serif;
    height: 100vh;
    margin: 0;
    }

    .panel {
    background-color: #ffffff;
    position: relative;
    overflow: hidden;
    width: 768px;
    max-width: 100%;
    min-height: 600px;
    transition: 0.6s;
    }

    .form-container {
    position: absolute;
    top: 0;
    height: 100%;
    transition: all 0.6s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    padding: 0 50px;
    text-align: center;
    }

    .sign-in-container {
    position: absolute;
    left: 0;
    width: 50%;
    z-index: 2;
    transform: translateX(0);
    opacity: 1;
    transition: all 0.6s ease-in-out;
    }


    .sign-up-container {
    position: absolute;
    left: 0;
    width: 50%;
    z-index: 1;
    transform: translateX(0);
    opacity: 0;
    transition: all 0.6s ease-in-out;
    }

    .overlay-container {
    position: absolute;
    top: 0;
    left: 50%;
    width: 50%;
    height: 100%;
    overflow: hidden;
    transition: transform 0.6s ease-in-out;
    z-index: 100;
    }

    .overlay {
    background: #FF416C;
    background: linear-gradient(to top, #3a506b, #E0DCC8);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: 0 0;
    color: #FFFFFF;
    position: relative;
    left: -100%;
    height: 100%;
    width: 200%;
    transform: translateX(0);
    transition: transform 0.6s ease-in-out;
    }

    .overlay-panel {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    padding: 0 40px;
    text-align: center;
    top: 0;
    height: 100%;
    width: 50%;
    transform: translateX(0);
    transition: transform 0.6s ease-in-out;
    }

    .overlay-left {
    transform: translateX(-20%);
    }

    .overlay-right {
    right: 0;
    transform: translateX(0);
    }

    .login-panel .sign-in-container {
    transform: translateX(100%);
    opacity: 0; /* Hide the "Sign In" panel */
    z-index: 1; /* Push to the back */
    }

    .login-panel .sign-up-container {
    transform: translateX(100%);
    opacity: 1; /* Show the "Sign Up" panel */
    z-index: 5; /* Bring to the front */
    }

    .login-panel .overlay-container {
    transform: translateX(-100%);
    }

    .login-panel .overlay {
    transform: translateX(50%);
    }

    .login-panel .overlay-left {
    transform: translateX(0);
    }

    .login-panel .overlay-right {
    transform: translateX(20%);
    }

    button {
    border-radius: 20px;
    border: 1px solid #FF4B2B;
    background-color: #FF4B2B;
    color: #FFFFFF;
    font-size: 12px;
    font-weight: bold;
    padding: 12px 45px;
    letter-spacing: 1px;
    text-transform: uppercase;
    transition: transform 80ms ease-in;
    cursor: pointer;
    }

    button:active {
    transform: scale(0.95);
    }

    button.ghost {
    background-color: transparent;
    border-color: #FFFFFF;
    }

    input {
    background-color: #eee;
    border: none;
    padding: 12px 15px;
    margin: 8px 0;
    width: 100%;
    }

    h1 {
    font-weight: bold;
    margin: 0;
    margin-bottom: 15px;
    }

    p {
    font-size: 14px;
    font-weight: 100;
    line-height: 20px;
    letter-spacing: 0.5px;
    margin: 20px 0 30px;
    }
</style>

<script>
    function initializePanel() {
    console.log("Panel initialized");
    }

    function animatePanel(isLogin) {
    const panel = document.querySelector('.panel');
    if (isLogin) {
    if (!panel.classList.contains('login-panel')) {
    panel.classList.add('login-panel');
    }
    } else {
    if (panel.classList.contains('login-panel')) {
    panel.classList.remove('login-panel');
    }
    }
    }

    function showMessage(message) {
    alert(message);
    }
</script>
@code {
    List<string> Sports = new List<string> // יצירת רשימת ספורט מחרוזות עם שמות של סוגי ספורט
{
    "Soccer", "Basketball", "Tennis", "Swimming", "Running", "Cycling",
    "Boxing", "Martial Arts", "Volleyball", "Baseball", "Gymnastics",
    "Rowing", "Wrestling", "CrossFit", "Climbing", "Surfing",
    "American Football", "Table Tennis", "Badminton", "Handball",
    "Rugby", "Skiing", "Snowboarding", "Skateboarding", "Golf",
    "Cricket", "Fencing", "Karate", "Judo", "Triathlon"
};

    private string UserEmail = ""; // מחרוזת לאחסון אימייל של משתמש
    private string CoachEmail = ""; // מחרוזת לאחסון אימייל של מאמן
    private string CoachPassword = ""; // מחרוזת לאחסון סיסמה של מאמן
    private string UserPassword = ""; // מחרוזת לאחסון סיסמה של משתמש
    private bool isFirstRender = true; // בוליאני לבדיקת רנדר ראשון
    private bool isLogin = false; // בוליאני לזיהוי מצב של התחברות

    private string panelClass // מאפיין שמחזיר את שם הקלאס של הפאנל לפי מצב התחברות
    {
        get
        {
            if (isLogin) // אם במצב התחברות
            {
                return "login-panel"; // מחזיר את שם הקלאס
            }
            return ""; // אחרת מחזיר מחרוזת ריקה
        }
    }

    private void TogglePanel() // פעולה להפעלת או כיבוי מצב ההתחברות
    {
        isLogin = !isLogin; // הפיכת הערך של isLogin
        if (JS != null) // בדיקה אם אובייקט JS קיים
        {
            JS.InvokeVoidAsync("animatePanel", isLogin); // קריאה לפונקציה ב-JS לצורך אנימציה לפי מצב התחברות
        }
        StateHasChanged(); // רענון מצב הקומפוננטה
    }

    Trainer cus = new Trainer(); // יצירת מופע חדש של מתאמן
    TrainerDB db = new TrainerDB(); // יצירת מופע של גישה למסד הנתונים של מתאמנים
    Coach coach = new Coach(); // יצירת מופע חדש של מאמן
    CoachDB dbc = new CoachDB(); // יצירת מופע של גישה למסד הנתונים של מאמנים
    string sport; // משתנה לאחסון סוג ספורט נבחר
    bool b; // משתנה בוליאני לתוצאה מהכנסה למסד

    async Task RegTrainer() // פונקציה אסינכרונית לרישום מתאמן
    {
        if (cus.emailaddress.Contains("@gmail")) // בדיקה אם כתובת האימייל מכילה את הסיומת הרצויה
        {
            string a = cus.phonenumber; // שמירת מספר הטלפון למשתנה עזר
            int p; // משתנה לעיבוד המספר

            bool bp = int.TryParse(a, out p); // ניסיון להמיר את המספר למספר שלם

            if (bp) // אם ההמרה הצליחה
            {
                int l = int.Parse(a); // המרה למספר שלם
                if (l > 0) // בדיקה אם המספר חיובי
                {
                    b = await db.insertuser(cus); // הכנסת המשתמש למסד
                    navigationManager.NavigateTo("/"); // ניווט לדף הבית
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"PhoneNumber Is Wrong"); // הצגת התראה אם המספר שגוי
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"PhoneNumber Is Wrong"); // הצגת התראה אם ההמרה נכשלה
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Email Is Wrong"); // הצגת התראה אם האימייל לא תקין
        }
    }

    async Task RegCoach() // פונקציה אסינכרונית לרישום מאמן
    {
        if (coach.emailaddress.Contains("@gmail")) // בדיקה אם כתובת האימייל תקינה
        {
            coach.sport = sport; // שמירת סוג הספורט הנבחר במאמן
            string a = coach.phonenumber; // שמירת מספר הטלפון למשתנה עזר
            int p; // משתנה לעיבוד המספר

            bool bp = int.TryParse(a, out p); // ניסיון להמיר למספר שלם

            if (bp && coach.exp >= 0 && coach.exp < 100) // בדיקה אם המספר חוקי והניסיון של המאמן בטווח תקין
            {
                b = await dbc.insertcoach(coach); // הכנסת המאמן למסד
                navigationManager.NavigateTo("/"); // ניווט לדף הבית
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"something Is Wrong"); // הצגת התראה אם יש בעיה במספר
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Email Is Wrong"); // הצגת התראה אם האימייל שגוי
        }
    }

    private void OnChange(ChangeEventArgs args) // פעולה שמופעלת כאשר הספורט משתנה בתיבת הבחירה
    {
        sport = args.Value.ToString(); // שמירת ערך הספורט מהאירוע למשתנה
    }
}

