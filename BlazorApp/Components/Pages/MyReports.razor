@page "/mr"
@using Models2
@using DBL2
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime js

<style>


    html, body {
    width: 100%;
    place-items: center;
    background: linear-gradient(to bottom, #3a506b, #E0DCC8);
    background-attachment: fixed;
    }

    .calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 8px;
    margin-bottom: 20px;
    }

    .day-button {
    width: 100%;
    padding: 10px;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    background-color: white;
    cursor: pointer;
    transition: all 0.2s;
    }

    .day-button:hover {
    background-color: #f7fafc;
    }

    .day-button.selected {
    background-color: #3a506b;
    color: white;
    }

    .workout-card {
    background-color: white;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 16px;
    margin-bottom: 12px;
    }

    .timeline {
    border-left: 2px solid #e2e8f0;
    margin-left: 70px;
    padding-left: 20px;
    position: relative;
    }

    .time-slot {
    display: flex;
    margin-bottom: 20px;
    position: relative;
    }

    .time-label {
    position: absolute;
    left: -90px;
    width: 60px;
    text-align: right;
    color: #64748b;
    }

    .workout-item {
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    padding: 8px;
    margin-left: 10px;
    flex: 1;
    }

    .nav-button {
    background-color: #4c6079;
    padding: 8px 16px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
    }

    .nav-button:hover {
    background-color: #abb5c2;
    }

    .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    }

    .badge {
    background-color: darkred;
    color: white;
    border-radius: 9999px;
    padding: 2px 8px;
    font-size: 0.75rem;
    display: inline-block;
    margin-top: 4px;
    }

    .tag {
    display: inline-block;
    padding: 2px 8px;
    border-radius: 9999px;
    font-size: 0.75rem;
    margin-right: 4px;
    }

    .tag-group {
    background-color: #dbeafe;
    color: #1e40af;
    }

    .tag-recurring {
    background-color: #dcfce7;
    color: #166534;
    }

    .button-24:hover,
    .button-24:active {
    background-color: initial;
    background-position: 0 0;
    color: #FF4742;
    }

    .button-24:active {
    opacity: .5;
    }

    .button-73 {
    appearance: none;
    background-color: #FFFFFF;
    border-radius: 40em;
    border-style: none;
    box-shadow: #ADCFFF 0 -12px 6px inset;
    box-sizing: border-box;
    color: #000000;
    cursor: pointer;
    display: inline-block;
    font-family: -apple-system,sans-serif;
    font-size: 1.2rem;
    font-weight: 700;
    letter-spacing: -.24px;
    margin: 0;
    outline: none;
    padding: 1rem 1.3rem;
    quotes: auto;
    text-align: center;
    text-decoration: none;
    transition: all .15s;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    }

    .button-73:hover {
    background-color: #FFC229;
    box-shadow: #FF6314 0 -6px 8px inset;
    transform: scale(1.125);
    }

    .button-73:active {
    transform: scale(1.025);
    }

    .button-24 {
    background: #FF4742;
    border: 1px solid #FF4742;
    border-radius: 6px;
    box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;
    box-sizing: border-box;
    color: #FFFFFF;
    cursor: pointer;
    display: inline-block;
    font-family: nunito,roboto,proxima-nova,"proxima nova",sans-serif;
    font-size: 16px;
    font-weight: 800;
    line-height: 16px;
    min-height: 40px;
    outline: 0;
    padding: 12px 14px;
    text-align: center;
    text-rendering: geometricprecision;
    text-transform: none;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    vertical-align: middle;
    }

    .button-24:hover,
    .button-24:active {
    background-color: initial;
    background-position: 0 0;
    color: #FF4742;
    }

    .button-24:active {
    opacity: .5;
    }
</style>

<div class="container-fluid">
    <nav class="navbar navbar-expand-lg custom_nav-container ">
        <a class="navbar-brand" href="/">
            <span>
                SportSync
            </span>
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                <ul class="navbar-nav  ">
                    <li class="nav-item active">
                        <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/p">Your Profile</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/searchG">Search Groups</a>
                    </li>

                </ul>
                <div class="user_option">
                    <form class="form-inline my-2 my-lg-0 ml-0 ml-lg-4 mb-3 mb-lg-0">
                        <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit"></button>
                    </form>
                </div>
            </div>
        </div>
    </nav>
</div>

<div class="container">
    <!-- Week Navigation -->
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
        <button class="nav-button" @onclick="PreviousWeek">Previous Week</button>
        <h2 style="font-size: 1.5rem; font-weight: bold;color:white">Week of @CurrentWeekStart.ToString("MMMM dd, yyyy")</h2>
        <button class="nav-button" @onclick="NextWeek">Next Week</button>
    </div>

    <!-- Calendar Grid -->
    <!-- Workout Details -->
    <div style="background-color: white; border-radius: 8px; padding: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
        </div>

        @if (SelectedDate.HasValue && AllWeekWorkouts.Any())
        {
            foreach (Workout workout in AllWeekWorkouts.OrderBy(w => w.date).ThenBy(w => w.hour))
            {

                <div class="workout-card">
                    <div style="display: flex; justify-content: space-between;">
                        <div>
                            <div style="font-weight: bold;">@(DateTime.Parse(workout.date).ToString("MM/dd"))</div>
                            <div style="color: #64748b; margin-top: 4px;">
                                Duration: @(workout.duration / 60) minutes
                            </div>
                            <div style="margin-top: 8px;">
                                @if (workout.Isgroup == "true")
                                {
                                    <span class="tag tag-group">Group</span>
                                }
                                @if (workout.IsReccuring == "true")
                                {
                                    <span class="tag tag-recurring">Recurring</span>
                                }
                            </div>
                        </div>
                        <div>
                            <div style="font-weight: bold;"> @GetFormattedHour(workout.hour)</div>
                        </div>
                        <div>
                            <button class="button-73" @onclick="() => ToggleWorkout(workout.id)">
                                @if (openWorkoutId == workout.id)
                                {
                                    <span>CLOSE WORKOUT</span>
                                }
                                else
                                {
                                    <span>OPEN WORKOUT</span>
                                }
                            </button>
                        </div>
                    </div>

                    @if (openWorkoutId == workout.id)
                    {
                        if(workout.Isgroup=="true")
                        {
                            <p>No Specified Workouts , Ask Coach for more information</p>
                        }
                        else{
                            <div style="margin-top: 20px; padding-top: 10px; border-top: 1px solid #e2e8f0;">
                                @foreach (Drill drill in workoutDrills)
                                {
                                    <div style="margin-top: 10px;">
                                        <h5 class="card-title text-primary">@drill.name</h5>
                                        <strong>Muscle Group:</strong> @drill.muscle <br />
                                        <strong>Duration:</strong> @(drill.duration / 60) minutes <br />
                                    </div>
                                }
                            </div>
                        }
                        
                    }
                </div>

            }
        }
        else if (SelectedDate.HasValue)
        {
            <div style="text-align: center; color: #64748b; padding: 32px 0;">
                <p>No workouts scheduled for this Week.</p>
            </div>
        }
        else
        {
            <div style="text-align: center; color: #64748b; padding: 32px 0;">
                <p>Select a Week to view or schedule workouts.</p>
            </div>
        }
    </div>
</div>



@code {
    private DateTime CurrentWeekStart = GetStartOfWeek(DateTime.Today);
    private DateTime? SelectedDate;
    private List<DateTime> WeekDays = new();
    private List<Workout> DailyWorkouts = new();
    private List<Workout> AllWeekWorkouts = new();
    WorkoutDB workoutDB = new WorkoutDB();
    DrillsListDB DLDB = new DrillsListDB();
    List<drillslist> Drillsnames = new List<drillslist>();
    List<Drill> Drills = new List<Drill>();
    DrillDB drillDB = new DrillDB();
    Trainer c;
    List<drillslist> DL = new List<drillslist>();

    private bool isOpen = false;
    private int openWorkoutId = -1;
    private List<Drill> workoutDrills = new List<Drill>();

    private async Task ToggleWorkout(int workoutId)
    {
        workoutDrills.Clear();

        if (openWorkoutId == workoutId)
        {
            // If this workout is already open, close it
            openWorkoutId = -1;
            workoutDrills.Clear();
        }
        else
        {
            // Open this workout and load its drills
            openWorkoutId = workoutId;
            Drillsnames = await DLDB.SelectAllInWorkoutAsync(workoutId);
            foreach (var dl in Drillsnames)
            {
                Drill drill = await drillDB.SelectByPkAsync(dl.Drillname);
                workoutDrills.Add(drill);
            }
        }

        StateHasChanged();
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {


            var user1 = await MySession.GetAsync<Trainer>("Trainer");
            if (user1.Success)
            {
                c = user1.Value;
                await UpdateWeekDays();
                if (!SelectedDate.HasValue)
                {
                    await SelectDate(DateTime.Today);
                }


                StateHasChanged();
            }
            if (c == null)
            {
                navigationManager.NavigateTo("/login");

            }
            else
            {

            }


        }
    }



    private static DateTime GetStartOfWeek(DateTime date)
    {
        // Calculate days to subtract to get to previous Sunday
        int daysToSubtract = (int)date.DayOfWeek;
        return date.AddDays(-daysToSubtract).Date;
    }

    private async Task UpdateWeekDays()
    {
        WeekDays = Enumerable.Range(0, 7)
            .Select(offset => CurrentWeekStart.AddDays(offset))
            .ToList();
        await LoadWeekWorkouts();
    }

    private async Task LoadWeekWorkouts()
    {
        // שליפת כל האימונים לשבוע הנוכחי ממסד הנתונים
        List<Workout> rawWorkouts = await workoutDB.GetWorkoutsByWeekAsync(c.id, CurrentWeekStart);
        List<Workout> DeletedWorkouts = new List<Workout>();

        foreach (Workout workout in rawWorkouts)
        {
            if (workout.duration < 0)
            {
                DeletedWorkouts.Add(workout);
            }


        }

        // יצירת רשימה של האימונים לשבוע
        AllWeekWorkouts = new List<Workout>();

        // מעבר על כל האימונים שנטענו
        foreach (Workout workout in rawWorkouts)
        {

            // הוספת האימון לרשימה הראשית


            // אם האימון מחזורי, נוסיף אותו גם לימים המתאימים
            if (workout.IsReccuring == "true")
            {
                if (DateTime.TryParse(workout.date, out DateTime workoutDate))
                {
                    DayOfWeek recurringDay = workoutDate.DayOfWeek;

                    // מעבר על ימי השבוע הנוכחיים והבאים
                    foreach (var day in WeekDays)
                    {
                        // אם היום הנוכחי תואם ליום המחזורי (לדוגמה, שני)
                        if (day.DayOfWeek == recurringDay && workout.duration > 0)
                        {
                            // הוספת האימון למחזור לכל יום מתאים בשבוע הנוכחי
                            if (!AllWeekWorkouts.Any(w => w.id == workout.id))
                            {
                                int count = 0;
                                foreach (Workout wd in DeletedWorkouts)
                                {
                                    if (wd.duration == workout.id * -1 && DateTime.Parse(wd.date) == DateTime.Parse(workout.date))
                                    {
                                        count++;

                                    }
                                }
                                if (count == 0)
                                    AllWeekWorkouts.Add(workout);
                            }
                        }
                    }
                }
            }
            else
            {
                int count = 0;
                foreach (Workout wd in DeletedWorkouts)
                {
                    if (wd.duration == workout.id * -1 && DateTime.Parse(wd.date) == DateTime.Parse(workout.date))
                    {
                        count++;

                    }
                }
                if (count == 0 && workout.duration > 0)
                    AllWeekWorkouts.Add(workout);
            }
        }



    }


    private async Task SelectDate(DateTime date)
    {
        SelectedDate = date;
        DailyWorkouts.Clear(); // איפוס רשימת האימונים
        if (AllWeekWorkouts.Any())
        {
            foreach (var w in AllWeekWorkouts)
                if (DateTime.Parse(w.date).DayOfWeek == date.DayOfWeek && w.IsReccuring == "true" || DateTime.Parse(w.date) == date)
                {
                    Workout workout = new Workout(w);
                    workout.date = date.ToString();
                    DailyWorkouts.Add(workout);
                }
        }
        else
        {
            await LoadWeekWorkouts();
        }
    }



    private async Task PreviousWeek()
    {
        CurrentWeekStart = CurrentWeekStart.AddDays(-7);
        await UpdateWeekDays();
        if (SelectedDate.HasValue)
        {
            await LoadWeekWorkouts();
        }
    }

    private async Task NextWeek()
    {
        CurrentWeekStart = CurrentWeekStart.AddDays(7);
        await UpdateWeekDays();
        if (SelectedDate.HasValue)
        {
            await LoadWeekWorkouts();
        }
    }

    private string GetFormattedHour(int hour)
    {
        int h = hour / 100;
        int m = hour % 100;
        string a = h.ToString("D2") + ":" + m.ToString("D2");
        return a;
    }



}
