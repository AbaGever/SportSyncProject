@page "/c"
@using Models2

@using DBL2;
<div class="calendar-container">
    <div class="calendar-header">
        <div class="controls">
            <button class="nav-button" @onclick="PreviousWeek">&lt;</button>
            <h2>@CurrentWeek.ToString("MMMM yyyy")</h2>
            <button class="nav-button" @onclick="NextWeek">&gt;</button>
        </div>
    </div>

    <div class="calendar-wrapper">
        <div class="weekdays-header">
            <div class="time-header"></div>
            @foreach (var day in WeekDays)
            {
                <div class="weekday">
                    <div class="day-name">@day.ToString("dddd")</div>
                    <div class="day-date">@day.ToString("MM/dd")</div>
                </div>
            }
        </div>

        <div class="calendar-grid">
            <div class="time-column">
                @for (int hour = 6; hour <= 22; hour++)
                {
                    <div class="time-slot">@($"{hour:00}:00")</div>
                }
            </div>

            @foreach (var day in WeekDays)
            {
                <div class="day-column">
                    @for (int hour = 6; hour <= 22; hour++)
                    {
                        <div class="hour-slot">
                            @{
                                var workoutsInSlot = Workouts
                                .Where(w =>
                                DateTime.Parse(w.date).Date == day.Date &&
                                w.hour == hour)
                                .ToList();

                                foreach (var workout in workoutsInSlot)
                                {
                                    <div class="workout-item @(workout.Isgroup == "1" ? "group" : "personal")"
                                         style="height: @(workout.duration * 60)px">
                                        <div class="workout-time">
                                            @($"{workout.hour:00}:00 - {(workout.hour + workout.duration):00}:00")
                                        </div>
                                        <div class="workout-type">
                                            @(workout.Isgroup == "1" ? "Group Session" : "Personal Training")
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int TrainerId { get; set; }

    private DateTime CurrentWeek = DateTime.Now;
    private List<DateTime> WeekDays = new List<DateTime>();
    private List<Workout> Workouts = new List<Workout>();
    private WorkoutDB workoutDB = new WorkoutDB();

    protected override async Task OnInitializedAsync()
    {
        await LoadWeek();
    }

    private async Task LoadWeek()
    {
        // Get the start of the week (Sunday)
        var sunday = CurrentWeek.AddDays(-(int)CurrentWeek.DayOfWeek);
        WeekDays = Enumerable.Range(0, 7)
            .Select(i => sunday.AddDays(i))
            .ToList();

        await LoadWorkouts();
    }

    private async Task LoadWorkouts()
    {
        try
        {
            // Get workouts for the specific trainer
            var allWorkouts = await workoutDB.GetWorkoutsByTrainerIdAsync(TrainerId);

            // Filter workouts for the current week
            Workouts = allWorkouts;

            // .Where(w =>
            // {
            //     var workoutDate = DateTime.Parse(w.date);
            //     return workoutDate >= WeekDays.First() && workoutDate <= WeekDays.Last();
            // }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workouts: {ex.Message}");
            Workouts = new List<Workout>();
        }
    }

    private async Task PreviousWeek()
    {
        // Navigate to the previous week
        CurrentWeek = CurrentWeek.AddDays(-7);
        await LoadWeek();  // Reload the week and workouts
    }

    private async Task NextWeek()
    {
        // Navigate to the next week
        CurrentWeek = CurrentWeek.AddDays(7);
        await LoadWeek();  // Reload the week and workouts
    }
}

<style>
    .calendar-container {
        width: 100%;
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
        font-family: system-ui, -apple-system, sans-serif;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .calendar-wrapper {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .controls {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .nav-button {
        padding: 8px 16px;
        background-color: #f0f0f0;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .weekdays-header {
        display: grid;
        grid-template-columns: 60px repeat(7, 1fr);
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .time-header {
        width: 60px;
    }

    .weekday {
        padding: 10px;
        text-align: center;
        border-left: 1px solid #dee2e6;
    }

    .day-name {
        font-weight: bold;
        color: #495057;
    }

    .day-date {
        font-size: 0.9em;
        color: #6c757d;
        margin-top: 4px;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: 60px repeat(7, 1fr);
        background-color: white;
    }

    .time-column {
        background-color: #f8f9fa;
        border-right: 1px solid #dee2e6;
    }

    .time-slot {
        height: 60px;
        padding: 5px;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8em;
        color: #495057;
    }

    .day-column {
        border-right: 1px solid #dee2e6;
    }

    .hour-slot {
        height: 60px;
        border-bottom: 1px solid #dee2e6;
        position: relative;
    }

    .workout-item {
        position: absolute;
        width: 90%;
        left: 5%;
        border-radius: 4px;
        padding: 8px;
        font-size: 0.8em;
        overflow: hidden;
        z-index: 1;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .workout-item.group {
            background-color: #d4edda;
            border-left: 4px solid #28a745;
        }

        .workout-item.personal {
            background-color: #fff3cd;
            border-left: 4px solid #ffc107;
        }

    .workout-time {
        font-weight: bold;
        margin-bottom: 4px;
        color: #212529;
    }

    .workout-type {
        color: #495057;
    }
</style>