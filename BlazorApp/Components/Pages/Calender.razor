@page "/ws"
@using Models2
@using DBL2
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime js
@using System.Globalization

<style>


    html, body {
    height: 100vh;
    width: 100%;
    place-items: center;
    background: linear-gradient(to bottom, #3a506b, #E0DCC8);
    background-attachment: fixed;
    }

    .calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 8px;
    margin-bottom: 20px;
    }

    .day-button {
    width: 100%;
    padding: 10px;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    background-color: white;
    cursor: pointer;
    transition: all 0.2s;
    }

    .day-button:hover {
    background-color: #f7fafc;
    }

    .day-button.selected {
    background-color: #3a506b;
    color: white;
    }

    .workout-card {
    background-color: white;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 16px;
    margin-bottom: 12px;
    }

    .timeline {
    border-left: 2px solid #e2e8f0;
    margin-left: 70px;
    padding-left: 20px;
    position: relative;
    }

    .time-slot {
    display: flex;
    margin-bottom: 20px;
    position: relative;
    }

    .time-label {
    position: absolute;
    left: -90px;
    width: 60px;
    text-align: right;
    color: #64748b;
    }

    .workout-item {
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    padding: 8px;
    margin-left: 10px;
    flex: 1;
    }

    .nav-button {
    background-color: #4c6079;
    padding: 8px 16px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
    }

    .nav-button:hover {
    background-color: #abb5c2;
    }

    .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    }

    .badge {
    background-color: darkred;
    color: white;
    border-radius: 9999px;
    padding: 2px 8px;
    font-size: 0.75rem;
    display: inline-block;
    margin-top: 4px;
    }

    .tag {
    display: inline-block;
    padding: 2px 8px;
    border-radius: 9999px;
    font-size: 0.75rem;
    margin-right: 4px;
    }

    .tag-group {
    background-color: #dbeafe;
    color: #1e40af;
    }

    .tag-recurring {
    background-color: #dcfce7;
    color: #166534;
    }

    .button-24:hover,
    .button-24:active {
    background-color: initial;
    background-position: 0 0;
    color: #FF4742;
    }

    .button-24:active {
    opacity: .5;
    }

    .button-73 {
    appearance: none;
    background-color: #FFFFFF;
    border-radius: 40em;
    border-style: none;
    box-shadow: #ADCFFF 0 -12px 6px inset;
    box-sizing: border-box;
    color: #000000;
    cursor: pointer;
    display: inline-block;
    font-family: -apple-system,sans-serif;
    font-size: 1.2rem;
    font-weight: 700;
    letter-spacing: -.24px;
    margin: 0;
    outline: none;
    padding: 1rem 1.3rem;
    quotes: auto;
    text-align: center;
    text-decoration: none;
    transition: all .15s;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    }

    .button-73:hover {
    background-color: #FFC229;
    box-shadow: #FF6314 0 -6px 8px inset;
    transform: scale(1.125);
    }

    .button-73:active {
    transform: scale(1.025);
    }

    .button-24 {
    background: #FF4742;
    border: 1px solid #FF4742;
    border-radius: 6px;
    box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;
    box-sizing: border-box;
    color: #FFFFFF;
    cursor: pointer;
    display: inline-block;
    font-family: nunito,roboto,proxima-nova,"proxima nova",sans-serif;
    font-size: 16px;
    font-weight: 800;
    line-height: 16px;
    min-height: 40px;
    outline: 0;
    padding: 12px 14px;
    text-align: center;
    text-rendering: geometricprecision;
    text-transform: none;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    vertical-align: middle;
    }

    .button-24:hover,
    .button-24:active {
    background-color: initial;
    background-position: 0 0;
    color: #FF4742;
    }

    .button-24:active {
    opacity: .5;
    }
</style>

<div class="container-fluid">
    <nav class="navbar navbar-expand-lg custom_nav-container ">
        <a class="navbar-brand" href="/">
            <span>
                SportSync
            </span>
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <div class="d-flex ml-auto flex-column flex-lg-row align-items-center">
                <ul class="navbar-nav  ">
                    <li class="nav-item active">
                        <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/p">Your Profile</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/mr">Weekly Reports</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/searchG">Search Groups</a>
                    </li>

                </ul>
                <div class="user_option">
                    <form class="form-inline my-2 my-lg-0 ml-0 ml-lg-4 mb-3 mb-lg-0">
                        <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit"></button>
                    </form>
                </div>
            </div>
        </div>
    </nav>
</div>

<div class="container">
    <!-- Week Navigation -->
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
        <button class="nav-button" @onclick="PreviousWeek">Previous Week</button>
        <h2 style="font-size: 1.5rem; font-weight: bold;color:white">Week of @CurrentWeekStart.ToString("MMMM dd, yyyy", System.Globalization.CultureInfo.InvariantCulture)</h2>        <button class="nav-button" @onclick="NextWeek">Next Week</button>
    </div>

    <!-- Calendar Grid -->
    <div class="calendar-grid">
        @foreach (var day in WeekDays)
        {
            <button class="day-button @(SelectedDate?.Date == day.Date ? "selected" : "")"
            @onclick="() => SelectDate(day)">
                <div style="font-weight: bold;">@day.ToString("ddd", System.Globalization.CultureInfo.InvariantCulture)</div>
                <div>@day.ToString("MMM dd", System.Globalization.CultureInfo.InvariantCulture)</div>
                @{
                    var workoutCount = GetWorkoutCountForDay(day);
                    if (workoutCount > 0)
                    {
                        <div class="badge">@workoutCount</div>
                    }
                }
            </button>
        }
    </div>



    <!-- Workout Details -->
    <div style="background-color: white; border-radius: 8px; padding: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
            <h3 style="font-size: 1.25rem; font-weight: bold;">
                @(SelectedDate.HasValue ? SelectedDate.Value.ToString("MMMM dd, yyyy") : "Select a date")
            </h3>

            <a href="t" class="nav-button" style="background-color: #22c55e;">Add WorkOut</a>
        </div>

        @if (SelectedDate.HasValue && DailyWorkouts.Any())
        {
            foreach (Workout workout in DailyWorkouts.OrderBy(w => w.hour))
            {

                <div class="workout-card">
                    <div style="display: flex; justify-content: space-between;">
                        <div>
                            <div style="font-weight: bold;">@GetFormattedHour(workout.hour)</div>
                            <div style="color: #64748b; margin-top: 4px;">
                                Duration: @(workout.duration / 60) minutes
                            </div>
                            <div style="margin-top: 8px;">
                                @if (workout.Isgroup == "true")
                                {
                                    <span class="tag tag-group">Group</span>
                                }
                                @if (workout.IsReccuring == "true")
                                {
                                    <span class="tag tag-recurring">Recurring</span>
                                }
                            </div>
                        </div>
                        <div>
                            <a href="/ShowW/@(workout.id)/@(DateTime.Parse(workout.date).ToString("yyyy-MM-dd"))" class="button-73">Edit</a>
                            <button class="button-24" @onclick="() => DeleteCurrent(workout)">Delete Today</button>
                        </div>
                    </div>
                </div>

            }
        }
        else if (SelectedDate.HasValue)
        {
            <div style="text-align: center; color: #64748b; padding: 32px 0;">
                <p>No workouts scheduled for this day.</p>
                <p style="margin-top: 8px; font-size: 0.875rem;">Click the Add Workout button to schedule one.</p>
            </div>
        }
        else
        {
            <div style="text-align: center; color: #64748b; padding: 32px 0;">
                <p>Select a day to view or schedule workouts.</p>
            </div>
        }
    </div>
</div>



@code {
    private DateTime CurrentWeekStart = GetStartOfWeek(DateTime.Today); // מגדיר את תחילת השבוע הנוכחי (יום ראשון) לפי היום של היום
    private DateTime? SelectedDate; // מגדיר משתנה לתאריך שנבחר, יכול להיות ריק
    private List<DateTime> WeekDays = new(); // רשימה של כל ימי השבוע הנוכחי
    private List<Workout> DailyWorkouts = new(); // רשימת אימונים ליום שנבחר
    private List<Workout> AllWeekWorkouts = new(); // רשימת כל האימונים לשבוע הנוכחי
    WorkoutDB workoutDB = new WorkoutDB(); // יצירת מופע של מחלקת ניהול אימונים למסד הנתונים
    Trainer c; // משתנה לאחסון המאמן הנוכחי (צריך לקבל מזהה מאומת)

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // בדיקה אם זו ההרצה הראשונה של הקומפוננטה
        {
            var user1 = await MySession.GetAsync<Trainer>("Trainer"); // טוען את המאמן מה-session
            if (user1.Success) // אם הטעינה הצליחה
            {
                c = user1.Value; // שומר את המאמן למשתנה c
                await UpdateWeekDays(); // מעדכן את רשימת ימי השבוע
                if (!SelectedDate.HasValue) // אם לא נבחר תאריך עדיין
                {
                    await SelectDate(DateTime.Today); // בוחר את היום הנוכחי כברירת מחדל
                }
                StateHasChanged(); // מבקש רינדור מחדש של הקומפוננטה
            }
            if (c == null) // אם המאמן לא הוגדר (לא מחובר)
            {
                navigationManager.NavigateTo("/login"); // מפנה לעמוד ההתחברות
            }
            else
            {
                // לא מוגדר כרגע
            }
        }
    }

    private async Task DeleteCurrent(Workout w)
    {
        WorkoutDB workoutDB = new WorkoutDB(); // יצירת מופע חדש של מחלקת מסד נתונים
        Workout w1 = new Workout(); // יצירת מופע חדש של אימון
        w1.trainerid = w.trainerid; // העתקת מזהה המאמן מהאימון המקורי
        w1.date = DateTime.Parse(w.date).ToString("yyyy-MM-dd"); // פורמט תאריך באימון החדש
        w1.duration = w.id * -1; // משתמש במזהה האימון המקורי כפחות כדי לסמן מחיקה
        w1.Isgroup = w.Isgroup; // העתקת מאפיין האם אימון קבוצתי
        w1.hour = w.hour; // העתקת שעת האימון
        w1.IsReccuring = w.IsReccuring; // העתקת סטטוס אימון מחזורי
        workoutDB.InsertWorkout(w1); // מכניס למסד העתק עם מזהה שלילי לסימון מחיקה
        await LoadWeekWorkouts(); // טוען מחדש את רשימת האימונים לשבוע
        await SelectDate(DateTime.Parse(w1.date)); // טוען מחדש את האימונים עבור התאריך של האימון המחוק
        await SelectDate(DateTime.Parse(w.date)); // טוען מחדש את האימונים עבור התאריך המקורי (רגיל)
        StateHasChanged(); // מבקש רינדור מחדש
    }

    private static DateTime GetStartOfWeek(DateTime date)
    {
        int daysToSubtract = (int)date.DayOfWeek; // מחשב כמה ימים יש להחסיר כדי להגיע ליום ראשון
        return date.AddDays(-daysToSubtract).Date; // מחזיר את תאריך יום ראשון של אותו שבוע
    }

    private async Task UpdateWeekDays()
    {
        WeekDays = Enumerable.Range(0, 7) // יוצר טווח של 7 ימים
            .Select(offset => CurrentWeekStart.AddDays(offset)) // מוסיף ימים לתחילת השבוע ליצירת כל הימים בשבוע
            .ToList(); // ממיר לרשימה
        await LoadWeekWorkouts(); // טוען את האימונים של השבוע החדש
    }

    private async Task LoadWeekWorkouts()
    {
        List<Workout> rawWorkouts = await workoutDB.GetWorkoutsByWeekAsync(c.id, CurrentWeekStart); // מושך את כל האימונים של המאמן בשבוע הנוכחי ממסד הנתונים
        List<Workout> DeletedWorkouts = new List<Workout>(); // רשימה לאימונים שסומנו כמחוקות

        foreach (Workout workout in rawWorkouts)
        {
            if (workout.duration < 0) // אם משך האימון שלילי, סימן שהוא מחוק
            {
                DeletedWorkouts.Add(workout); // מוסיף לרשימת האימונים המחוקים
            }
        }

        AllWeekWorkouts = new List<Workout>(); // מאתחל את רשימת האימונים לשבוע הנוכחי

        foreach (Workout workout in rawWorkouts)
        {
            // אם אימון מחזורי
            if (workout.IsReccuring == "true")
            {
                if (DateTime.TryParse(workout.date, out DateTime workoutDate)) // בודק אם תאריך האימון תקין
                {
                    DayOfWeek recurringDay = workoutDate.DayOfWeek; // מוצא את יום המחזור של האימון

                    foreach (var day in WeekDays) // עובר על ימי השבוע
                    {
                        if (day.DayOfWeek == recurringDay && workout.duration > 0) // אם יום השבוע תואם ליום המחזור והאימון לא מחוק
                        {
                            if (!AllWeekWorkouts.Any(w => w.id == workout.id)) // אם האימון לא נוסף עדיין לרשימה
                            {
                                int count = 0;
                                foreach (Workout wd in DeletedWorkouts) // בודק אם קיימת מחיקה תואמת באותו יום
                                {
                                    if (wd.duration == workout.id * -1 && DateTime.Parse(wd.date) == DateTime.Parse(workout.date))
                                    {
                                        count++; // מגדיל מונה למחיקות תואמות
                                    }
                                }
                                if (count == 0) // אם אין מחיקות תואמות
                                    AllWeekWorkouts.Add(workout); // מוסיף את האימון לרשימת האימונים השבועית
                            }
                        }
                    }
                }
            }
            else
            {
                int count = 0;
                foreach (Workout wd in DeletedWorkouts) // בודק מחיקות תואמות לאימונים לא מחזוריים
                {
                    if (wd.duration == workout.id * -1 && DateTime.Parse(wd.date) == DateTime.Parse(workout.date))
                    {
                        count++;
                    }
                }
                if (count == 0 && workout.duration > 0) // אם האימון לא מחוק ותקין
                    AllWeekWorkouts.Add(workout); // מוסיף לרשימת האימונים השבועית
            }
        }
    }

    private int GetWorkoutCountForDay(DateTime date)
    {
        return AllWeekWorkouts.Count(w =>
            w.IsReccuring == "true" && DateTime.Parse(w.date).DayOfWeek == date.DayOfWeek || // סופר אימונים מחזוריים שמתאימים ליום השבוע
            w.IsReccuring == "false" && DateTime.Parse(w.date) == date); // וסופר אימונים רגילים שמתאימים לתאריך המדויק
    }

    private async Task SelectDate(DateTime date)
    {
        SelectedDate = date; // מגדיר את התאריך הנבחר
        DailyWorkouts.Clear(); // מאפס את רשימת האימונים ליום הנבחר
        if (AllWeekWorkouts.Any()) // אם יש אימונים בשבוע
        {
            foreach (var w in AllWeekWorkouts)
                if (DateTime.Parse(w.date).DayOfWeek == date.DayOfWeek && w.IsReccuring == "true" || // אם אימון מחזורי מתאים ליום השבוע
                    DateTime.Parse(w.date) == date) // או אם אימון רגיל מתאים לתאריך המדויק
                {
                    Workout workout = new Workout(w); // יוצר העתק של האימון
                    workout.date = date.ToString(); // מעדכן את התאריך באימון להיום הנבחר
                    DailyWorkouts.Add(workout); // מוסיף את האימון לרשימת האימונים היומית
                }
        }
        else
        {
            await LoadWorkouts(); // טוען אימונים אם הרשימה ריקה
        }
    }

    private async Task LoadWorkouts()
    {
        if (SelectedDate.HasValue && AllWeekWorkouts != null) // אם נבחר תאריך והרשימה לא ריקה
        {
            DailyWorkouts = AllWeekWorkouts
                .Where(w => DateTime.TryParse(w.date, out DateTime workoutDate)
                            && workoutDate.Date == SelectedDate.Value.Date
                            && w.duration >= 0) // סינון אימונים עבור התאריך הנבחר ותקינים (לא מחוק)
                .ToList(); // ממיר לרשימה
        }
    }

    private async Task PreviousWeek()
    {
        CurrentWeekStart = CurrentWeekStart.AddDays(-7); // מזיז את תחילת השבוע שבוע אחורה
        await UpdateWeekDays(); // מעדכן את רשימת ימי השבוע
        if (SelectedDate.HasValue) // אם יש תאריך שנבחר
        {
            await LoadWorkouts(); // טוען את האימונים עבור התאריך הנבחר
        }
    }

    private async Task NextWeek()
    {
        CurrentWeekStart = CurrentWeekStart.AddDays(7); // מזיז את תחילת השבוע שבוע קדימה
        await UpdateWeekDays(); // מעדכן את רשימת ימי השבוע
        if (SelectedDate.HasValue) // אם יש תאריך שנבחר
        {
            await LoadWorkouts(); // טוען את האימונים עבור התאריך הנבחר
        }
    }

    private string GetFormattedHour(int hour)
    {
        int h = hour / 100; // מחשב את השעות מתוך פורמט של שעה (לדוגמה 1330 => 13)
        int m = hour % 100; // מחשב את הדקות מתוך פורמט של שעה
        string a = h.ToString("D2") + ":" + m.ToString("D2"); // פורמט מחרוזת בשעה:דקות עם שתי ספרות לכל אחד
        return a; // מחזיר את המחרוזת המעוצבת של השעה
    }
}

