@page "/ws"
@using Models2
@using DBL2
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime js

<style>


    html, body {
    height: 100vh;
    width: 100%;
    place-items: center;
    background: -webkit-linear-gradient(bottom, #E0DCC8, #3a506b);
    }

    .calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 8px;
    margin-bottom: 20px;
    }

    .day-button {
    width: 100%;
    padding: 10px;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    background-color: white;
    cursor: pointer;
    transition: all 0.2s;
    }

    .day-button:hover {
    background-color: #f7fafc;
    }

    .day-button.selected {
    background-color: #3b82f6;
    color: white;
    }

    .workout-card {
    background-color: white;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 16px;
    margin-bottom: 12px;
    }

    .timeline {
    border-left: 2px solid #e2e8f0;
    margin-left: 70px;
    padding-left: 20px;
    position: relative;
    }

    .time-slot {
    display: flex;
    margin-bottom: 20px;
    position: relative;
    }

    .time-label {
    position: absolute;
    left: -90px;
    width: 60px;
    text-align: right;
    color: #64748b;
    }

    .workout-item {
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    padding: 8px;
    margin-left: 10px;
    flex: 1;
    }

    .nav-button {
    background-color: #3b82f6;
    padding: 8px 16px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
    }

    .nav-button:hover {
    background-color: #2563eb;
    }

    .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    }

    .badge {
    background-color: #3b82f6;
    color: white;
    border-radius: 9999px;
    padding: 2px 8px;
    font-size: 0.75rem;
    display: inline-block;
    margin-top: 4px;
    }

    .tag {
    display: inline-block;
    padding: 2px 8px;
    border-radius: 9999px;
    font-size: 0.75rem;
    margin-right: 4px;
    }

    .tag-group {
    background-color: #dbeafe;
    color: #1e40af;
    }

    .tag-recurring {
    background-color: #dcfce7;
    color: #166534;
    }
</style>

<div class="container">
    <!-- Week Navigation -->
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
        <button class="nav-button" @onclick="PreviousWeek">Previous Week</button>
        <h2 style="font-size: 1.5rem; font-weight: bold;">Week of @CurrentWeekStart.ToString("MMMM dd, yyyy")</h2>
        <button class="nav-button" @onclick="NextWeek">Next Week</button>
    </div>

    <!-- Calendar Grid -->
    <div class="calendar-grid">
        @foreach (var day in WeekDays)
        {
            <button class="day-button @(SelectedDate?.Date == day.Date ? "selected" : "")"
            @onclick="() => SelectDate(day)">
                <div style="font-weight: bold;">@day.ToString("ddd")</div>
                <div>@day.ToString("MMM dd")</div>
                @{
                    var workoutCount = GetWorkoutCountForDay(day);
                    if (workoutCount > 0)
                    {
                        <div class="badge">@workoutCount</div>
                    }
                }
            </button>
        }
    </div>



    <!-- Workout Details -->
    <div style="background-color: white; border-radius: 8px; padding: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
            <h3 style="font-size: 1.25rem; font-weight: bold;">
                @(SelectedDate.HasValue ? SelectedDate.Value.ToString("MMMM dd, yyyy") : "Select a date")
            </h3>
            <button class="nav-button" style="background-color: #22c55e;">
                Add Workout
            </button>
        </div>

        @if (SelectedDate.HasValue && DailyWorkouts.Any())
        {
            foreach (var workout in DailyWorkouts.OrderBy(w => w.hour))
            {
                <div class="workout-card">
                    <div style="display: flex; justify-content: space-between;">
                        <div>
                            <div style="font-weight: bold;">@GetFormattedHour(workout.hour)</div>
                            <div style="color: #64748b; margin-top: 4px;">
                                Duration: @workout.duration minutes
                            </div>
                            <div style="margin-top: 8px;">
                                @if (workout.Isgroup == "true")
                                {
                                    <span class="tag tag-group">Group</span>
                                }
                                @if (workout.IsReccuring == "true")
                                {
                                    <span class="tag tag-recurring">Recurring</span>
                                }
                            </div>
                        </div>
                        <div>
                            <button style="color: #3b82f6; padding: 4px; margin-right: 8px;">Edit</button>
                            <button style="color: #ef4444; padding: 4px;">Delete</button>
                        </div>
                    </div>
                </div>
            }
        }
        else if (SelectedDate.HasValue)
        {
            <div style="text-align: center; color: #64748b; padding: 32px 0;">
                <p>No workouts scheduled for this day.</p>
                <p style="margin-top: 8px; font-size: 0.875rem;">Click the Add Workout button to schedule one.</p>
            </div>
        }
        else
        {
            <div style="text-align: center; color: #64748b; padding: 32px 0;">
                <p>Select a day to view or schedule workouts.</p>
            </div>
        }
    </div>
</div>



@code {
    private DateTime CurrentWeekStart = GetStartOfWeek(DateTime.Today);
    private DateTime? SelectedDate;
    private List<DateTime> WeekDays = new();
    private List<Workout> DailyWorkouts = new();
    private List<Workout> AllWeekWorkouts = new();
    WorkoutDB workoutDB = new WorkoutDB();
    Trainer c; // Replace with actual trainer ID from authentication

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {


            var user1 = await MySession.GetAsync<Trainer>("Trainer");
            if (user1.Success)
            {
                c = user1.Value;               
                await UpdateWeekDays();
                if (!SelectedDate.HasValue)
                {
                    await SelectDate(DateTime.Today);
                }


                StateHasChanged();
            }
            if (c == null)
            {
                navigationManager.NavigateTo("/login");

            }
            else{

            }


        }
    }




    private static DateTime GetStartOfWeek(DateTime date)
    {
        // Calculate days to subtract to get to previous Sunday
        int daysToSubtract = (int)date.DayOfWeek;
        return date.AddDays(-daysToSubtract).Date;
    }

    private async Task UpdateWeekDays()
    {
        WeekDays = Enumerable.Range(0, 7)
            .Select(offset => CurrentWeekStart.AddDays(offset))
            .ToList();
        await LoadWeekWorkouts();
    }

    private async Task LoadWeekWorkouts()
    {
        // שליפת כל האימונים לשבוע הנוכחי ממסד הנתונים
        var rawWorkouts = await workoutDB.GetWorkoutsByWeekAsync(c.id, CurrentWeekStart);

        // יצירת רשימה של האימונים לשבוע
        AllWeekWorkouts = new List<Workout>();

        // מעבר על כל האימונים שנטענו
        foreach (var workout in rawWorkouts)
        {
            // הוספת האימון לרשימה הראשית
            AllWeekWorkouts.Add(workout);

            // אם האימון מחזורי, נוסיף אותו גם לימים המתאימים
            if (workout.IsReccuring == "true")
            {
                DateTime workoutDate = DateTime.Parse(workout.date);
                DayOfWeek recurringDay = workoutDate.DayOfWeek;

                // מעבר על ימי השבוע הנוכחיים והבאים
                foreach (var day in WeekDays)
                {
                    // אם היום הנוכחי תואם ליום המחזורי (לדוגמה, שני)
                    if (day.DayOfWeek == recurringDay)
                    {
                        // הוספת האימון למחזור לכל יום מתאים בשבוע הנוכחי
                        if (!AllWeekWorkouts.Contains(workout))
                        {
                            AllWeekWorkouts.Add(workout);
                        }
                    }
                }
            }
        }
    }

    private int GetWorkoutCountForDay(DateTime date)
    {
        return AllWeekWorkouts.Count(w => DateTime.Parse(w.date).Date == date.Date);
    }

    private async Task SelectDate(DateTime date)
    {
        SelectedDate = date;
        DailyWorkouts.Clear(); // איפוס רשימת האימונים
        if (AllWeekWorkouts.Any())
        {
            foreach (var w in AllWeekWorkouts)
                if (DateTime.Parse(w.date).DayOfWeek == date.DayOfWeek && w.IsReccuring == "true" || DateTime.Parse(w.date) == date)
                {
                    Workout workout = new Workout(w);
                    workout.date = date.ToString();
                    DailyWorkouts.Add(workout);
                }
        }
        else
        {
            await LoadWorkouts();
        }
    }

    private async Task LoadWorkouts()
    {
        if (SelectedDate.HasValue)
        {
            var allWorkouts = await workoutDB.GetWorkoutsByWeekAsync(c.id, CurrentWeekStart);
            DailyWorkouts = allWorkouts
                .Where(w => DateTime.Parse(w.date).Date == SelectedDate.Value.Date)
                .ToList();
        }
    }

    private async Task PreviousWeek()
    {
        CurrentWeekStart = CurrentWeekStart.AddDays(-7);
        await UpdateWeekDays();
        if (SelectedDate.HasValue)
        {
            await LoadWorkouts();
        }
    }

    private async Task NextWeek()
    {
        CurrentWeekStart = CurrentWeekStart.AddDays(7);
        await UpdateWeekDays();
        if (SelectedDate.HasValue)
        {
            await LoadWorkouts();
        }
    }

    private string GetFormattedHour(int hour)
    {
        int h = hour / 100;
        int m = hour % 100;
        string a = h.ToString("D2") + ":" + m.ToString("D2");
        return a;
    }


    public static string GetDayOfWeekName(DateTime date)
    {
        return date.ToString("dddd", System.Globalization.CultureInfo.CurrentCulture);
    }
}
 